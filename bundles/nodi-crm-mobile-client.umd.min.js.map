{
  "version": 3,
  "file": "nodi-crm-mobile-client.umd.min.js",
  "sources": [
    "ng://@nodi/crm-mobile-client/node_modules/tslib/tslib.es6.js",
    "ng://@nodi/crm-mobile-client/out/encoder.ts",
    "ng://@nodi/crm-mobile-client/out/variables.ts",
    "ng://@nodi/crm-mobile-client/out/configuration.ts",
    "ng://@nodi/crm-mobile-client/out/api/campaignAdmin.service.ts",
    "ng://@nodi/crm-mobile-client/out/api/campaignApplication.service.ts",
    "ng://@nodi/crm-mobile-client/out/api/categoriesAdmin.service.ts",
    "ng://@nodi/crm-mobile-client/out/api/api.ts",
    "ng://@nodi/crm-mobile-client/out/api.module.ts",
    "ng://@nodi/crm-mobile-client/out/model-config.ts"
  ],
  "sourcesContent": [
    "/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n",
    "    import { HttpUrlEncodingCodec } from '@angular/common/http';\n\n/**\n* CustomHttpUrlEncodingCodec\n* Fix plus sign (+) not encoding, so sent as blank space\n* See: https://github.com/angular/angular/issues/11058#issuecomment-247367318\n*/\nexport class CustomHttpUrlEncodingCodec extends HttpUrlEncodingCodec {\n    encodeKey(k: string): string {\n        k = super.encodeKey(k);\n        return k.replace(/\\+/gi, '%2B');\n    }\n    encodeValue(v: string): string {\n        v = super.encodeValue(v);\n        return v.replace(/\\+/gi, '%2B');\n    }\n}\n\n",
    "import { InjectionToken } from '@angular/core';\n\nexport const BASE_PATH = new InjectionToken<string>('basePath');\nexport const COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n}\n",
    "export interface ConfigurationParameters {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n}\n\nexport class Configuration {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n\n    constructor(configurationParameters: ConfigurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n    }\n\n    /**\n     * Select the correct content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param contentTypes - the array of content types that are available for selection\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderContentType (contentTypes: string[]): string | undefined {\n        if (contentTypes.length == 0) {\n            return undefined;\n        }\n\n        let type = contentTypes.find(x => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n\n    /**\n     * Select the correct accept content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct accept content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param accepts - the array of content types that are available for selection.\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderAccept(accepts: string[]): string | undefined {\n        if (accepts.length == 0) {\n            return undefined;\n        }\n\n        let type = accepts.find(x => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime != null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n}\n",
    "/**\n * CRM Service Api\n * This is a sample server of MySki Miles Cfa services. For this sample, you can use the `access-token` to test the authorization filters.\n *\n * OpenAPI spec version: 1.0.0\n *\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional } from \"@angular/core\";\nimport {\n  HttpClient,\n  HttpHeaders,\n  HttpParams,\n  HttpResponse,\n  HttpEvent\n} from \"@angular/common/http\";\nimport { CustomHttpUrlEncodingCodec } from \"../encoder\";\n\nimport { Observable } from \"rxjs/Observable\";\n\nimport { Campaign } from \"../model/campaign\";\nimport { CampaignList } from \"../model/campaignList\";\nimport { ErrorReponse } from \"../model/errorReponse\";\n\nimport { BASE_PATH, COLLECTION_FORMATS } from \"../variables\";\nimport { Configuration } from \"../configuration\";\n\n@Injectable()\nexport class CampaignAdminService {\n  protected basePath = \"http://localhost:5000\";\n  public defaultHeaders = new HttpHeaders();\n  public configuration = new Configuration();\n\n  constructor(\n    protected httpClient: HttpClient,\n    @Optional() @Inject(BASE_PATH) basePath: string,\n    @Optional() configuration: Configuration\n  ) {\n    if (basePath) {\n      this.basePath = basePath;\n    }\n    if (configuration) {\n      this.configuration = configuration;\n      this.basePath = basePath || configuration.basePath || this.basePath;\n    }\n  }\n\n  /**\n   * @param consumes string[] mime-types\n   * @return true: consumes contains 'multipart/form-data', false: otherwise\n   */\n  private canConsumeForm(consumes: string[]): boolean {\n    const form = \"multipart/form-data\";\n    for (const consume of consumes) {\n      if (form === consume) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Fetches campaign details for admin\n   *\n   * @param contentLanguage\n   * @param id Campaign id\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getCampaign(\n    contentLanguage: string,\n    id: string,\n    observe?: \"body\",\n    reportProgress?: boolean\n  ): Observable<Campaign>;\n  public getCampaign(\n    contentLanguage: string,\n    id: string,\n    observe?: \"response\",\n    reportProgress?: boolean\n  ): Observable<HttpResponse<Campaign>>;\n  public getCampaign(\n    contentLanguage: string,\n    id: string,\n    observe?: \"events\",\n    reportProgress?: boolean\n  ): Observable<HttpEvent<Campaign>>;\n  public getCampaign(\n    contentLanguage: string,\n    id: string,\n    observe: any = \"body\",\n    reportProgress: boolean = false\n  ): Observable<any> {\n    if (contentLanguage === null || contentLanguage === undefined) {\n      throw new Error(\n        \"Required parameter contentLanguage was null or undefined when calling getCampaign.\"\n      );\n    }\n    if (id === null || id === undefined) {\n      throw new Error(\n        \"Required parameter id was null or undefined when calling getCampaign.\"\n      );\n    }\n\n    let headers = this.defaultHeaders;\n    if (contentLanguage !== undefined && contentLanguage !== null) {\n      headers = headers.set(\"Content-Language\", String(contentLanguage));\n    }\n\n    // authentication (bearer) required\n    if (this.configuration.apiKeys[\"Authorization\"]) {\n      headers = headers.set(\n        \"Authorization\",\n        this.configuration.apiKeys[\"Authorization\"]\n      );\n    }\n\n    // to determine the Accept header\n    let httpHeaderAccepts: string[] = [\"application/json\"];\n    const httpHeaderAcceptSelected:\n      | string\n      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    if (httpHeaderAcceptSelected != undefined) {\n      headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n    }\n\n    // to determine the Content-Type header\n    const consumes: string[] = [];\n\n    return this.httpClient.get(\n      `${this.basePath}/api/adm/campaigns/${encodeURIComponent(String(id))}`,\n      {\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress\n      }\n    );\n  }\n\n  /**\n   * Fetches active campaigns list for user\n   *\n   * @param xDeviceHash\n   * @param contentLanguage\n   * @param offset The number of items to skip before starting to collect the result set.\n   * @param limit The numbers of items to return.\n   * @param term Filter argument in which to retrieve the results. Basic text search on relevant fields\n   * @param sort Order in which to retrieve the results. Multiple sort criteria can not be passed\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getCampaings(\n    xDeviceHash: string,\n    contentLanguage: string,\n    offset?: number,\n    limit?: number,\n    term?: string,\n    sort?: string,\n    observe?: \"body\",\n    reportProgress?: boolean\n  ): Observable<Array<CampaignList>>;\n  public getCampaings(\n    xDeviceHash: string,\n    contentLanguage: string,\n    offset?: number,\n    limit?: number,\n    term?: string,\n    sort?: string,\n    observe?: \"response\",\n    reportProgress?: boolean\n  ): Observable<HttpResponse<Array<CampaignList>>>;\n  public getCampaings(\n    xDeviceHash: string,\n    contentLanguage: string,\n    offset?: number,\n    limit?: number,\n    term?: string,\n    sort?: string,\n    observe?: \"events\",\n    reportProgress?: boolean\n  ): Observable<HttpEvent<Array<CampaignList>>>;\n  public getCampaings(\n    xDeviceHash: string,\n    contentLanguage: string,\n    offset?: number,\n    limit?: number,\n    term?: string,\n    sort?: string,\n    observe: any = \"body\",\n    reportProgress: boolean = false\n  ): Observable<any> {\n    if (xDeviceHash === null || xDeviceHash === undefined) {\n      throw new Error(\n        \"Required parameter xDeviceHash was null or undefined when calling getCampaings.\"\n      );\n    }\n    if (contentLanguage === null || contentLanguage === undefined) {\n      throw new Error(\n        \"Required parameter contentLanguage was null or undefined when calling getCampaings.\"\n      );\n    }\n\n    let queryParameters = new HttpParams({\n      encoder: new CustomHttpUrlEncodingCodec()\n    });\n    if (offset !== undefined && offset !== null) {\n      queryParameters = queryParameters.set(\"offset\", <any>offset);\n    }\n    if (limit !== undefined && limit !== null) {\n      queryParameters = queryParameters.set(\"limit\", <any>limit);\n    }\n    if (term !== undefined && term !== null) {\n      queryParameters = queryParameters.set(\"term\", <any>term);\n    }\n    if (sort !== undefined && sort !== null) {\n      queryParameters = queryParameters.set(\"sort\", <any>sort);\n    }\n\n    let headers = this.defaultHeaders;\n    if (xDeviceHash !== undefined && xDeviceHash !== null) {\n      headers = headers.set(\"X-Device-Hash\", String(xDeviceHash));\n    }\n    if (contentLanguage !== undefined && contentLanguage !== null) {\n      headers = headers.set(\"Content-Language\", String(contentLanguage));\n    }\n\n    // authentication (bearer) required\n    if (this.configuration.apiKeys[\"Authorization\"]) {\n      headers = headers.set(\n        \"Authorization\",\n        this.configuration.apiKeys[\"Authorization\"]\n      );\n    }\n\n    // to determine the Accept header\n    let httpHeaderAccepts: string[] = [\"application/json\"];\n    const httpHeaderAcceptSelected:\n      | string\n      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    if (httpHeaderAcceptSelected != undefined) {\n      headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n    }\n\n    // to determine the Content-Type header\n    const consumes: string[] = [];\n\n    return this.httpClient.get(`${this.basePath}/api/adm/campaigns`, {\n      params: queryParameters,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  /**\n   * Add Campaign\n   *\n   * @param xDeviceHash\n   * @param contentLanguage\n   * @param body Ticket details will be add\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public saveCampaign(\n    xDeviceHash: string,\n    contentLanguage: string,\n    body?: Campaign,\n    observe?: \"body\",\n    reportProgress?: boolean\n  ): Observable<any>;\n  public saveCampaign(\n    xDeviceHash: string,\n    contentLanguage: string,\n    body?: Campaign,\n    observe?: \"response\",\n    reportProgress?: boolean\n  ): Observable<HttpResponse<any>>;\n  public saveCampaign(\n    xDeviceHash: string,\n    contentLanguage: string,\n    body?: Campaign,\n    observe?: \"events\",\n    reportProgress?: boolean\n  ): Observable<HttpEvent<any>>;\n  public saveCampaign(\n    xDeviceHash: string,\n    contentLanguage: string,\n    body?: Campaign,\n    observe: any = \"body\",\n    reportProgress: boolean = false\n  ): Observable<any> {\n    if (xDeviceHash === null || xDeviceHash === undefined) {\n      throw new Error(\n        \"Required parameter xDeviceHash was null or undefined when calling saveCampaign.\"\n      );\n    }\n    if (contentLanguage === null || contentLanguage === undefined) {\n      throw new Error(\n        \"Required parameter contentLanguage was null or undefined when calling saveCampaign.\"\n      );\n    }\n\n    let headers = this.defaultHeaders;\n    if (xDeviceHash !== undefined && xDeviceHash !== null) {\n      headers = headers.set(\"X-Device-Hash\", String(xDeviceHash));\n    }\n    if (contentLanguage !== undefined && contentLanguage !== null) {\n      headers = headers.set(\"Content-Language\", String(contentLanguage));\n    }\n\n    // authentication (bearer) required\n    if (this.configuration.apiKeys[\"Authorization\"]) {\n      headers = headers.set(\n        \"Authorization\",\n        this.configuration.apiKeys[\"Authorization\"]\n      );\n    }\n\n    // to determine the Accept header\n    let httpHeaderAccepts: string[] = [];\n    const httpHeaderAcceptSelected:\n      | string\n      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    if (httpHeaderAcceptSelected != undefined) {\n      headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n    }\n\n    // to determine the Content-Type header\n    const consumes: string[] = [];\n    const httpContentTypeSelected:\n      | string\n      | undefined = this.configuration.selectHeaderContentType(consumes);\n    if (httpContentTypeSelected != undefined) {\n      headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n    }\n\n    return this.httpClient.post(`${this.basePath}/api/adm/campaigns`, body, {\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  /**\n   * Update Campaign\n   *\n   * @param xDeviceHash\n   * @param contentLanguage\n   * @param id Campign id\n   * @param body Ticket details will be add\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public updateCampaign(\n    xDeviceHash: string,\n    contentLanguage: string,\n    id: string,\n    body?: Campaign,\n    observe?: \"body\",\n    reportProgress?: boolean\n  ): Observable<any>;\n  public updateCampaign(\n    xDeviceHash: string,\n    contentLanguage: string,\n    id: string,\n    body?: Campaign,\n    observe?: \"response\",\n    reportProgress?: boolean\n  ): Observable<HttpResponse<any>>;\n  public updateCampaign(\n    xDeviceHash: string,\n    contentLanguage: string,\n    id: string,\n    body?: Campaign,\n    observe?: \"events\",\n    reportProgress?: boolean\n  ): Observable<HttpEvent<any>>;\n  public updateCampaign(\n    xDeviceHash: string,\n    contentLanguage: string,\n    id: string,\n    body?: Campaign,\n    observe: any = \"body\",\n    reportProgress: boolean = false\n  ): Observable<any> {\n    if (xDeviceHash === null || xDeviceHash === undefined) {\n      throw new Error(\n        \"Required parameter xDeviceHash was null or undefined when calling updateCampaign.\"\n      );\n    }\n    if (contentLanguage === null || contentLanguage === undefined) {\n      throw new Error(\n        \"Required parameter contentLanguage was null or undefined when calling updateCampaign.\"\n      );\n    }\n    if (id === null || id === undefined) {\n      throw new Error(\n        \"Required parameter id was null or undefined when calling updateCampaign.\"\n      );\n    }\n\n    let headers = this.defaultHeaders;\n    if (xDeviceHash !== undefined && xDeviceHash !== null) {\n      headers = headers.set(\"X-Device-Hash\", String(xDeviceHash));\n    }\n    if (contentLanguage !== undefined && contentLanguage !== null) {\n      headers = headers.set(\"Content-Language\", String(contentLanguage));\n    }\n\n    // authentication (bearer) required\n    if (this.configuration.apiKeys[\"Authorization\"]) {\n      headers = headers.set(\n        \"Authorization\",\n        this.configuration.apiKeys[\"Authorization\"]\n      );\n    }\n\n    // to determine the Accept header\n    let httpHeaderAccepts: string[] = [];\n    const httpHeaderAcceptSelected:\n      | string\n      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    if (httpHeaderAcceptSelected != undefined) {\n      headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n    }\n\n    // to determine the Content-Type header\n    const consumes: string[] = [];\n    const httpContentTypeSelected:\n      | string\n      | undefined = this.configuration.selectHeaderContentType(consumes);\n    if (httpContentTypeSelected != undefined) {\n      headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n    }\n\n    return this.httpClient.put(\n      `${this.basePath}/api/adm/campaigns/${encodeURIComponent(String(id))}`,\n      {\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress\n      }\n    );\n  }\n}\n",
    "/**\n * CRM Service Api\n * This is a sample server of MySki Miles Cfa services. For this sample, you can use the `access-token` to test the authorization filters.\n *\n * OpenAPI spec version: 1.0.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs/Observable';\n\nimport { CampaignSummary } from '../model/campaignSummary';\nimport { CategoriesSummary } from '../model/categoriesSummary';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class CampaignApplicationService {\n\n    protected basePath = 'http://localhost:5000';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Fetches active categories list for user\n     * \n     * @param xDeviceHash \n     * @param contentLanguage \n     * @param offset The number of items to skip before starting to collect the result set.\n     * @param limit The numbers of items to return.\n     * @param term Filter argument in which to retrieve the results. Basic text search on relevant fields\n     * @param sort Order in which to retrieve the results. Multiple sort criteria can not be passed\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getAllCategories(xDeviceHash: string, contentLanguage: string, offset?: number, limit?: number, term?: string, sort?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<CategoriesSummary>>;\n    public getAllCategories(xDeviceHash: string, contentLanguage: string, offset?: number, limit?: number, term?: string, sort?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CategoriesSummary>>>;\n    public getAllCategories(xDeviceHash: string, contentLanguage: string, offset?: number, limit?: number, term?: string, sort?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CategoriesSummary>>>;\n    public getAllCategories(xDeviceHash: string, contentLanguage: string, offset?: number, limit?: number, term?: string, sort?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (xDeviceHash === null || xDeviceHash === undefined) {\n            throw new Error('Required parameter xDeviceHash was null or undefined when calling getAllCategories.');\n        }\n        if (contentLanguage === null || contentLanguage === undefined) {\n            throw new Error('Required parameter contentLanguage was null or undefined when calling getAllCategories.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (offset !== undefined && offset !== null) {\n            queryParameters = queryParameters.set('offset', <any>offset);\n        }\n        if (limit !== undefined && limit !== null) {\n            queryParameters = queryParameters.set('limit', <any>limit);\n        }\n        if (term !== undefined && term !== null) {\n            queryParameters = queryParameters.set('term', <any>term);\n        }\n        if (sort !== undefined && sort !== null) {\n            queryParameters = queryParameters.set('sort', <any>sort);\n        }\n\n        let headers = this.defaultHeaders;\n        if (xDeviceHash !== undefined && xDeviceHash !== null) {\n            headers = headers.set('X-Device-Hash', String(xDeviceHash));\n        }\n        if (contentLanguage !== undefined && contentLanguage !== null) {\n            headers = headers.set('Content-Language', String(contentLanguage));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get(`${this.basePath}/api/app/campaigns/categories`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Fetches active campaigns list for user\n     * \n     * @param xDeviceHash \n     * @param contentLanguage \n     * @param offset The number of items to skip before starting to collect the result set.\n     * @param limit The numbers of items to return.\n     * @param term Filter argument in which to retrieve the results. Basic text search on relevant fields\n     * @param sort Order in which to retrieve the results. Multiple sort criteria can not be passed\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getAppCampaings(xDeviceHash: string, contentLanguage: string, offset?: number, limit?: number, term?: string, sort?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<CampaignSummary>>;\n    public getAppCampaings(xDeviceHash: string, contentLanguage: string, offset?: number, limit?: number, term?: string, sort?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CampaignSummary>>>;\n    public getAppCampaings(xDeviceHash: string, contentLanguage: string, offset?: number, limit?: number, term?: string, sort?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CampaignSummary>>>;\n    public getAppCampaings(xDeviceHash: string, contentLanguage: string, offset?: number, limit?: number, term?: string, sort?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (xDeviceHash === null || xDeviceHash === undefined) {\n            throw new Error('Required parameter xDeviceHash was null or undefined when calling getAppCampaings.');\n        }\n        if (contentLanguage === null || contentLanguage === undefined) {\n            throw new Error('Required parameter contentLanguage was null or undefined when calling getAppCampaings.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (offset !== undefined && offset !== null) {\n            queryParameters = queryParameters.set('offset', <any>offset);\n        }\n        if (limit !== undefined && limit !== null) {\n            queryParameters = queryParameters.set('limit', <any>limit);\n        }\n        if (term !== undefined && term !== null) {\n            queryParameters = queryParameters.set('term', <any>term);\n        }\n        if (sort !== undefined && sort !== null) {\n            queryParameters = queryParameters.set('sort', <any>sort);\n        }\n\n        let headers = this.defaultHeaders;\n        if (xDeviceHash !== undefined && xDeviceHash !== null) {\n            headers = headers.set('X-Device-Hash', String(xDeviceHash));\n        }\n        if (contentLanguage !== undefined && contentLanguage !== null) {\n            headers = headers.set('Content-Language', String(contentLanguage));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get(`${this.basePath}/api/app/campaigns`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Fetches active campaigns according to category id\n     * \n     * @param xDeviceHash \n     * @param contentLanguage \n     * @param categoryId Category id\n     * @param offset The number of items to skip before starting to collect the result set.\n     * @param limit The numbers of items to return.\n     * @param term Filter argument in which to retrieve the results. Basic text search on relevant fields\n     * @param sort Order in which to retrieve the results. Multiple sort criteria can not be passed\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getCampaingByCategoryId(xDeviceHash: string, contentLanguage: string, categoryId: string, offset?: number, limit?: number, term?: string, sort?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<CampaignSummary>>;\n    public getCampaingByCategoryId(xDeviceHash: string, contentLanguage: string, categoryId: string, offset?: number, limit?: number, term?: string, sort?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CampaignSummary>>>;\n    public getCampaingByCategoryId(xDeviceHash: string, contentLanguage: string, categoryId: string, offset?: number, limit?: number, term?: string, sort?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CampaignSummary>>>;\n    public getCampaingByCategoryId(xDeviceHash: string, contentLanguage: string, categoryId: string, offset?: number, limit?: number, term?: string, sort?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (xDeviceHash === null || xDeviceHash === undefined) {\n            throw new Error('Required parameter xDeviceHash was null or undefined when calling getCampaingByCategoryId.');\n        }\n        if (contentLanguage === null || contentLanguage === undefined) {\n            throw new Error('Required parameter contentLanguage was null or undefined when calling getCampaingByCategoryId.');\n        }\n        if (categoryId === null || categoryId === undefined) {\n            throw new Error('Required parameter categoryId was null or undefined when calling getCampaingByCategoryId.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (offset !== undefined && offset !== null) {\n            queryParameters = queryParameters.set('offset', <any>offset);\n        }\n        if (limit !== undefined && limit !== null) {\n            queryParameters = queryParameters.set('limit', <any>limit);\n        }\n        if (term !== undefined && term !== null) {\n            queryParameters = queryParameters.set('term', <any>term);\n        }\n        if (sort !== undefined && sort !== null) {\n            queryParameters = queryParameters.set('sort', <any>sort);\n        }\n\n        let headers = this.defaultHeaders;\n        if (xDeviceHash !== undefined && xDeviceHash !== null) {\n            headers = headers.set('X-Device-Hash', String(xDeviceHash));\n        }\n        if (contentLanguage !== undefined && contentLanguage !== null) {\n            headers = headers.set('Content-Language', String(contentLanguage));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get(`${this.basePath}/api/app/campaigns/categories/${encodeURIComponent(String(categoryId))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n",
    "/**\n * CRM Service Api\n * This is a sample server of MySki Miles Cfa services. For this sample, you can use the `access-token` to test the authorization filters.\n *\n * OpenAPI spec version: 1.0.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs/Observable';\n\nimport { CategoryListResponse } from '../model/categoryListResponse';\nimport { CategoryRequest } from '../model/categoryRequest';\nimport { CategoryResponse } from '../model/categoryResponse';\nimport { CreatedReponse } from '../model/createdReponse';\nimport { ErrorReponse } from '../model/errorReponse';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class CategoriesAdminService {\n\n    protected basePath = 'http://localhost:5000';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Delete Category\n     * \n     * @param contentLanguage \n     * @param id Category id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteCategory(contentLanguage: string, id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteCategory(contentLanguage: string, id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteCategory(contentLanguage: string, id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteCategory(contentLanguage: string, id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (contentLanguage === null || contentLanguage === undefined) {\n            throw new Error('Required parameter contentLanguage was null or undefined when calling deleteCategory.');\n        }\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling deleteCategory.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (contentLanguage !== undefined && contentLanguage !== null) {\n            headers = headers.set('Content-Language', String(contentLanguage));\n        }\n\n        // authentication (bearer) required\n        if (this.configuration.apiKeys[\"Authorization\"]) {\n            headers = headers.set('Authorization', this.configuration.apiKeys[\"Authorization\"]);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.delete(`${this.basePath}/api/adm/categories/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Fetches active categories list for admin\n     * \n     * @param contentLanguage \n     * @param offset The number of items to skip before starting to collect the result set.\n     * @param limit The numbers of items to return.\n     * @param term Filter argument in which to retrieve the results. Basic text search on relevant fields\n     * @param sort Order in which to retrieve the results. Multiple sort criteria can not be passed\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getCategories(contentLanguage: string, offset?: number, limit?: number, term?: string, sort?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<CategoryListResponse>>;\n    public getCategories(contentLanguage: string, offset?: number, limit?: number, term?: string, sort?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CategoryListResponse>>>;\n    public getCategories(contentLanguage: string, offset?: number, limit?: number, term?: string, sort?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CategoryListResponse>>>;\n    public getCategories(contentLanguage: string, offset?: number, limit?: number, term?: string, sort?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (contentLanguage === null || contentLanguage === undefined) {\n            throw new Error('Required parameter contentLanguage was null or undefined when calling getCategories.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (offset !== undefined && offset !== null) {\n            queryParameters = queryParameters.set('offset', <any>offset);\n        }\n        if (limit !== undefined && limit !== null) {\n            queryParameters = queryParameters.set('limit', <any>limit);\n        }\n        if (term !== undefined && term !== null) {\n            queryParameters = queryParameters.set('term', <any>term);\n        }\n        if (sort !== undefined && sort !== null) {\n            queryParameters = queryParameters.set('sort', <any>sort);\n        }\n\n        let headers = this.defaultHeaders;\n        if (contentLanguage !== undefined && contentLanguage !== null) {\n            headers = headers.set('Content-Language', String(contentLanguage));\n        }\n\n        // authentication (bearer) required\n        if (this.configuration.apiKeys[\"Authorization\"]) {\n            headers = headers.set('Authorization', this.configuration.apiKeys[\"Authorization\"]);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get(`${this.basePath}/api/adm/categories`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Fetches category details for admin\n     * \n     * @param contentLanguage \n     * @param id Campaign id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getCategory(contentLanguage: string, id: string, observe?: 'body', reportProgress?: boolean): Observable<CategoryResponse>;\n    public getCategory(contentLanguage: string, id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CategoryResponse>>;\n    public getCategory(contentLanguage: string, id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CategoryResponse>>;\n    public getCategory(contentLanguage: string, id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (contentLanguage === null || contentLanguage === undefined) {\n            throw new Error('Required parameter contentLanguage was null or undefined when calling getCategory.');\n        }\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling getCategory.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (contentLanguage !== undefined && contentLanguage !== null) {\n            headers = headers.set('Content-Language', String(contentLanguage));\n        }\n\n        // authentication (bearer) required\n        if (this.configuration.apiKeys[\"Authorization\"]) {\n            headers = headers.set('Authorization', this.configuration.apiKeys[\"Authorization\"]);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get(`${this.basePath}/api/adm/categories/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Add Category\n     * \n     * @param contentLanguage \n     * @param body Category details will be add\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public saveCategory(contentLanguage: string, body?: CategoryRequest, observe?: 'body', reportProgress?: boolean): Observable<CreatedReponse>;\n    public saveCategory(contentLanguage: string, body?: CategoryRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CreatedReponse>>;\n    public saveCategory(contentLanguage: string, body?: CategoryRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CreatedReponse>>;\n    public saveCategory(contentLanguage: string, body?: CategoryRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (contentLanguage === null || contentLanguage === undefined) {\n            throw new Error('Required parameter contentLanguage was null or undefined when calling saveCategory.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (contentLanguage !== undefined && contentLanguage !== null) {\n            headers = headers.set('Content-Language', String(contentLanguage));\n        }\n\n        // authentication (bearer) required\n        if (this.configuration.apiKeys[\"Authorization\"]) {\n            headers = headers.set('Authorization', this.configuration.apiKeys[\"Authorization\"]);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post(`${this.basePath}/api/adm/categories`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update Category\n     * \n     * @param contentLanguage \n     * @param id Category id\n     * @param body Ticket details will be add\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateCategory(contentLanguage: string, id: string, body?: CategoryRequest, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public updateCategory(contentLanguage: string, id: string, body?: CategoryRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public updateCategory(contentLanguage: string, id: string, body?: CategoryRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public updateCategory(contentLanguage: string, id: string, body?: CategoryRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (contentLanguage === null || contentLanguage === undefined) {\n            throw new Error('Required parameter contentLanguage was null or undefined when calling updateCategory.');\n        }\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling updateCategory.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (contentLanguage !== undefined && contentLanguage !== null) {\n            headers = headers.set('Content-Language', String(contentLanguage));\n        }\n\n        // authentication (bearer) required\n        if (this.configuration.apiKeys[\"Authorization\"]) {\n            headers = headers.set('Authorization', this.configuration.apiKeys[\"Authorization\"]);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.put(`${this.basePath}/api/adm/categories/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n",
    "export * from './campaignAdmin.service';\nimport { CampaignAdminService } from './campaignAdmin.service';\nexport * from './campaignApplication.service';\nimport { CampaignApplicationService } from './campaignApplication.service';\nexport * from './categoriesAdmin.service';\nimport { CategoriesAdminService } from './categoriesAdmin.service';\nexport const APIS = [CampaignAdminService, CampaignApplicationService, CategoriesAdminService];\n",
    "import { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { Configuration } from './configuration';\nimport { HttpClient } from '@angular/common/http';\n\n\nimport { CampaignAdminService } from './api/campaignAdmin.service';\nimport { CampaignApplicationService } from './api/campaignApplication.service';\nimport { CategoriesAdminService } from './api/categoriesAdmin.service';\n\n@NgModule({\n  imports:      [],\n  declarations: [],\n  exports:      [],\n  providers: [\n    CampaignAdminService,\n    CampaignApplicationService,\n    CategoriesAdminService ]\n})\nexport class ApiModule {\n    public static forRoot(configurationFactory: () => Configuration): ModuleWithProviders {\n        return {\n            ngModule: ApiModule,\n            providers: [ { provide: Configuration, useFactory: configurationFactory } ]\n        };\n    }\n\n    constructor( @Optional() @SkipSelf() parentModule: ApiModule,\n                 @Optional() http: HttpClient) {\n        if (parentModule) {\n            throw new Error('ApiModule is already loaded. Import in your base AppModule only.');\n        }\n        if (!http) {\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n            'See also https://github.com/angular/angular/issues/20575');\n        }\n    }\n}\n",
    "export const ModelConfig = {\n    'Campaign':{\n      'title':{\n        'label': 'label.title','widget': 'string',\n        \n        \n        'attr':{\n        'required': {'value':true, 'message':'label.required'},'maxLength': {'value':15, 'message':'label.maxlength'},'minLength': {'value':5, 'message':'label.minLength'},}},\n      'summary':{\n        'label': 'label.summary','widget': 'string',\n        \n        \n        'attr':{\n        'required': {'value':true, 'message':'label.required'},}},\n      'detail':{\n        'label': 'label.detail','widget': 'string',\n        \n        \n        'attr':{\n        }},\n      'isShownHomePage':{\n        'label': 'label.isShownHomePage','widget': 'checkbox',\n        \n        \n        'attr':{\n        }},\n      'order':{\n        'label': 'label.order','widget': 'integer',\n        \n        \n        'attr':{\n        }},\n      'coverImage':{\n        'label': 'label.coverImage','widget': 'string',\n        \n        \n        'attr':{\n        }},\n      'brandId':{\n        'label': 'label.brandId','widget': 'string',\n        \n        \n        'attr':{\n        }},\n      'categoryId':{\n        'label': 'label.categoryId','widget': 'string',\n        \n        \n        'attr':{\n        }},\n      'validity':{\n        \n        \n        \n        'attr':{\n        }},\n    },\n    'CampaignCategoriesSummary':{\n      'id':{\n        \n        \n        \n        'attr':{\n        }},\n      'title':{\n        \n        \n        \n        'attr':{\n        }},\n    },\n    'CampaignList':{\n      'id':{\n        \n        \n        \n        'attr':{\n        }},\n      'title':{\n        \n        \n        \n        'attr':{\n        }},\n      'isShownHomePage':{\n        \n        \n        \n        'attr':{\n        }},\n      'order':{\n        \n        \n        \n        'attr':{\n        }},\n      'brandName':{\n        \n        \n        \n        'attr':{\n        }},\n      'categoryName':{\n        \n        \n        \n        'attr':{\n        }},\n      'validity':{\n        \n        \n        \n        'attr':{\n        }},\n    },\n    'CampaignSummary':{\n      'id':{\n        \n        \n        \n        'attr':{\n        }},\n      'title':{\n        \n        \n        \n        'attr':{\n        }},\n      'summary':{\n        \n        \n        \n        'attr':{\n        }},\n      'detail':{\n        \n        \n        \n        'attr':{\n        }},\n      'isShownHomePage':{\n        \n        \n        \n        'attr':{\n        }},\n      'order':{\n        \n        \n        \n        'attr':{\n        }},\n      'coverImage':{\n        \n        \n        \n        'attr':{\n        }},\n      'brandName':{\n        \n        \n        \n        'attr':{\n        }},\n      'category':{\n        \n        \n        \n        'attr':{\n        }},\n      'validity':{\n        \n        \n        \n        'attr':{\n        }},\n    },\n    'CategoriesSummary':{\n      'id':{\n        \n        \n        \n        'attr':{\n        }},\n      'name':{\n        \n        \n        \n        'attr':{\n        }},\n    },\n    'CategoryListResponse':{\n      'id':{\n        \n        \n        \n        'attr':{\n        }},\n      'name':{\n        \n        \n        \n        'attr':{\n        }},\n    },\n    'CategoryRequest':{\n      'id':{\n        \n        \n        \n        'attr':{\n        }},\n      'name':{\n        'label': 'label.title','widget': 'string',\n        \n        \n        'attr':{\n        'required': {'value':true, 'message':'label.required'},}},\n    },\n    'CategoryResponse':{\n      'id':{\n        \n        \n        \n        'attr':{\n        }},\n      'name':{\n        \n        \n        \n        'attr':{\n        }},\n    },\n    'CreatedReponse':{\n      'id':{\n        \n        \n        \n        'attr':{\n        }},\n    },\n    'DateRange':{\n      'from':{\n        \n        \n        \n        'attr':{\n        }},\n      'to':{\n        \n        \n        \n        'attr':{\n        }},\n    },\n    'ErrorReponse':{\n      'code':{\n        \n        \n        \n        'attr':{\n        }},\n      'message':{\n        \n        \n        \n        'attr':{\n        }},\n    },\n}\n    "
  ],
  "names": [
    "extendStatics",
    "d",
    "b",
    "Object",
    "setPrototypeOf",
    "__proto__",
    "Array",
    "p",
    "hasOwnProperty",
    "__values",
    "o",
    "m",
    "Symbol",
    "iterator",
    "i",
    "call",
    "next",
    "length",
    "value",
    "done",
    "_super",
    "CustomHttpUrlEncodingCodec",
    "__extends",
    "__",
    "this",
    "constructor",
    "prototype",
    "create",
    "tslib_1.__extends",
    "HttpUrlEncodingCodec",
    "encodeKey",
    "k",
    "replace",
    "encodeValue",
    "v",
    "BASE_PATH",
    "InjectionToken",
    "Configuration",
    "selectHeaderContentType",
    "contentTypes",
    "_this",
    "undefined",
    "type",
    "find",
    "x",
    "isJsonMime",
    "selectHeaderAccept",
    "accepts",
    "mime",
    "jsonMime",
    "RegExp",
    "test",
    "toLowerCase",
    "configurationParameters",
    "apiKeys",
    "username",
    "password",
    "accessToken",
    "basePath",
    "withCredentials",
    "CampaignAdminService",
    "canConsumeForm",
    "consumes",
    "consumes_1",
    "tslib_1.__values",
    "consumes_1_1",
    "getCampaign",
    "contentLanguage",
    "id",
    "observe",
    "reportProgress",
    "Error",
    "headers",
    "defaultHeaders",
    "set",
    "String",
    "configuration",
    "httpHeaderAcceptSelected",
    "httpClient",
    "get",
    "encodeURIComponent",
    "getCampaings",
    "xDeviceHash",
    "offset",
    "limit",
    "term",
    "sort",
    "queryParameters",
    "HttpParams",
    "encoder",
    "params",
    "saveCampaign",
    "body",
    "httpContentTypeSelected",
    "post",
    "updateCampaign",
    "put",
    "HttpHeaders",
    "Injectable",
    "HttpClient",
    "decorators",
    "Optional",
    "Inject",
    "args",
    "CampaignApplicationService",
    "consumes_2",
    "consumes_2_1",
    "getAllCategories",
    "getAppCampaings",
    "getCampaingByCategoryId",
    "categoryId",
    "CategoriesAdminService",
    "consumes_3",
    "consumes_3_1",
    "deleteCategory",
    "delete",
    "getCategories",
    "getCategory",
    "saveCategory",
    "updateCategory",
    "APIS",
    "ApiModule",
    "forRoot",
    "configurationFactory",
    "ngModule",
    "providers",
    "provide",
    "useFactory",
    "parentModule",
    "http",
    "NgModule",
    "imports",
    "declarations",
    "exports",
    "SkipSelf",
    "csv",
    "tsv",
    "ssv",
    "pipes",
    "Campaign",
    "title",
    "label",
    "widget",
    "attr",
    "required",
    "message",
    "maxLength",
    "minLength",
    "summary",
    "detail",
    "isShownHomePage",
    "order",
    "coverImage",
    "brandId",
    "validity",
    "CampaignCategoriesSummary",
    "CampaignList",
    "brandName",
    "categoryName",
    "CampaignSummary",
    "category",
    "CategoriesSummary",
    "name",
    "CategoryListResponse",
    "CategoryRequest",
    "CategoryResponse",
    "CreatedReponse",
    "DateRange",
    "from",
    "to",
    "ErrorReponse",
    "code"
  ],
  "mappings": "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"
}
