{
  "version": 3,
  "file": "nodi-crm-mobile-client.js",
  "sources": [
    "ng://@nodi/crm-mobile-client/out/model-config.ts",
    "ng://@nodi/crm-mobile-client/out/api.module.ts",
    "ng://@nodi/crm-mobile-client/out/api/api.ts",
    "ng://@nodi/crm-mobile-client/out/api/categoriesAdmin.service.ts",
    "ng://@nodi/crm-mobile-client/out/api/campaignApplication.service.ts",
    "ng://@nodi/crm-mobile-client/out/api/campaignAdmin.service.ts",
    "ng://@nodi/crm-mobile-client/out/configuration.ts",
    "ng://@nodi/crm-mobile-client/out/variables.ts",
    "ng://@nodi/crm-mobile-client/out/encoder.ts"
  ],
  "sourcesContent": [
    "export const ModelConfig = {\n    'Campaign':{\n      'title':{\n        'label': 'label.title','widget': 'string',\n        \n        \n        'attr':{\n        'required': {'value':true, 'message':'label.required'},'maxLength': {'value':15, 'message':'label.maxlength'},'minLength': {'value':5, 'message':'label.minLength'},}},\n      'summary':{\n        'label': 'label.summary','widget': 'string',\n        \n        \n        'attr':{\n        'required': {'value':true, 'message':'label.required'},}},\n      'detail':{\n        'label': 'label.detail','widget': 'string',\n        \n        \n        'attr':{\n        }},\n      'isShownHomePage':{\n        'label': 'label.isShownHomePage','widget': 'checkbox',\n        \n        \n        'attr':{\n        }},\n      'order':{\n        'label': 'label.order','widget': 'integer',\n        \n        \n        'attr':{\n        }},\n      'coverImage':{\n        'label': 'label.coverImage','widget': 'string',\n        \n        \n        'attr':{\n        }},\n      'brandId':{\n        'label': 'label.brandId','widget': 'string',\n        \n        \n        'attr':{\n        }},\n      'categoryId':{\n        'label': 'label.categoryId','widget': 'string',\n        \n        \n        'attr':{\n        }},\n      'validity':{\n        \n        \n        \n        'attr':{\n        }},\n    },\n    'CampaignCategoriesSummary':{\n      'id':{\n        \n        \n        \n        'attr':{\n        }},\n      'title':{\n        \n        \n        \n        'attr':{\n        }},\n    },\n    'CampaignList':{\n      'id':{\n        \n        \n        \n        'attr':{\n        }},\n      'title':{\n        \n        \n        \n        'attr':{\n        }},\n      'isShownHomePage':{\n        \n        \n        \n        'attr':{\n        }},\n      'order':{\n        \n        \n        \n        'attr':{\n        }},\n      'brandName':{\n        \n        \n        \n        'attr':{\n        }},\n      'categoryName':{\n        \n        \n        \n        'attr':{\n        }},\n      'validity':{\n        \n        \n        \n        'attr':{\n        }},\n    },\n    'CampaignSummary':{\n      'id':{\n        \n        \n        \n        'attr':{\n        }},\n      'title':{\n        \n        \n        \n        'attr':{\n        }},\n      'summary':{\n        \n        \n        \n        'attr':{\n        }},\n      'detail':{\n        \n        \n        \n        'attr':{\n        }},\n      'isShownHomePage':{\n        \n        \n        \n        'attr':{\n        }},\n      'order':{\n        \n        \n        \n        'attr':{\n        }},\n      'coverImage':{\n        \n        \n        \n        'attr':{\n        }},\n      'brandName':{\n        \n        \n        \n        'attr':{\n        }},\n      'category':{\n        \n        \n        \n        'attr':{\n        }},\n      'validity':{\n        \n        \n        \n        'attr':{\n        }},\n    },\n    'CategoriesSummary':{\n      'id':{\n        \n        \n        \n        'attr':{\n        }},\n      'name':{\n        \n        \n        \n        'attr':{\n        }},\n    },\n    'CategoryListResponse':{\n      'id':{\n        \n        \n        \n        'attr':{\n        }},\n      'name':{\n        \n        \n        \n        'attr':{\n        }},\n    },\n    'CategoryRequest':{\n      'id':{\n        \n        \n        \n        'attr':{\n        }},\n      'name':{\n        'label': 'label.title','widget': 'string',\n        \n        \n        'attr':{\n        'required': {'value':true, 'message':'label.required'},}},\n    },\n    'CategoryResponse':{\n      'id':{\n        \n        \n        \n        'attr':{\n        }},\n      'name':{\n        \n        \n        \n        'attr':{\n        }},\n    },\n    'CreatedReponse':{\n      'id':{\n        \n        \n        \n        'attr':{\n        }},\n    },\n    'DateRange':{\n      'from':{\n        \n        \n        \n        'attr':{\n        }},\n      'to':{\n        \n        \n        \n        'attr':{\n        }},\n    },\n    'ErrorReponse':{\n      'code':{\n        \n        \n        \n        'attr':{\n        }},\n      'message':{\n        \n        \n        \n        'attr':{\n        }},\n    },\n}\n    ",
    "import { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { Configuration } from './configuration';\nimport { HttpClient } from '@angular/common/http';\n\n\nimport { CampaignAdminService } from './api/campaignAdmin.service';\nimport { CampaignApplicationService } from './api/campaignApplication.service';\nimport { CategoriesAdminService } from './api/categoriesAdmin.service';\n\n@NgModule({\n  imports:      [],\n  declarations: [],\n  exports:      [],\n  providers: [\n    CampaignAdminService,\n    CampaignApplicationService,\n    CategoriesAdminService ]\n})\nexport class ApiModule {\n    public static forRoot(configurationFactory: () => Configuration): ModuleWithProviders {\n        return {\n            ngModule: ApiModule,\n            providers: [ { provide: Configuration, useFactory: configurationFactory } ]\n        };\n    }\n\n    constructor( @Optional() @SkipSelf() parentModule: ApiModule,\n                 @Optional() http: HttpClient) {\n        if (parentModule) {\n            throw new Error('ApiModule is already loaded. Import in your base AppModule only.');\n        }\n        if (!http) {\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n            'See also https://github.com/angular/angular/issues/20575');\n        }\n    }\n}\n",
    "export * from './campaignAdmin.service';\nimport { CampaignAdminService } from './campaignAdmin.service';\nexport * from './campaignApplication.service';\nimport { CampaignApplicationService } from './campaignApplication.service';\nexport * from './categoriesAdmin.service';\nimport { CategoriesAdminService } from './categoriesAdmin.service';\nexport const APIS = [CampaignAdminService, CampaignApplicationService, CategoriesAdminService];\n",
    "/**\n * CRM Service Api\n * This is a sample server of MySki Miles Cfa services. For this sample, you can use the `access-token` to test the authorization filters.\n *\n * OpenAPI spec version: 1.0.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs/Observable';\n\nimport { CategoryListResponse } from '../model/categoryListResponse';\nimport { CategoryRequest } from '../model/categoryRequest';\nimport { CategoryResponse } from '../model/categoryResponse';\nimport { CreatedReponse } from '../model/createdReponse';\nimport { ErrorReponse } from '../model/errorReponse';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class CategoriesAdminService {\n\n    protected basePath = 'http://localhost:5000';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Delete Category\n     * \n     * @param contentLanguage \n     * @param id Category id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteCategory(contentLanguage: string, id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteCategory(contentLanguage: string, id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteCategory(contentLanguage: string, id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteCategory(contentLanguage: string, id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (contentLanguage === null || contentLanguage === undefined) {\n            throw new Error('Required parameter contentLanguage was null or undefined when calling deleteCategory.');\n        }\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling deleteCategory.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (contentLanguage !== undefined && contentLanguage !== null) {\n            headers = headers.set('Content-Language', String(contentLanguage));\n        }\n\n        // authentication (bearer) required\n        if (this.configuration.apiKeys[\"Authorization\"]) {\n            headers = headers.set('Authorization', this.configuration.apiKeys[\"Authorization\"]);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.delete(`${this.basePath}/api/adm/categories/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Fetches active categories list for admin\n     * \n     * @param contentLanguage \n     * @param offset The number of items to skip before starting to collect the result set.\n     * @param limit The numbers of items to return.\n     * @param term Filter argument in which to retrieve the results. Basic text search on relevant fields\n     * @param sort Order in which to retrieve the results. Multiple sort criteria can not be passed\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getCategories(contentLanguage: string, offset?: number, limit?: number, term?: string, sort?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<CategoryListResponse>>;\n    public getCategories(contentLanguage: string, offset?: number, limit?: number, term?: string, sort?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CategoryListResponse>>>;\n    public getCategories(contentLanguage: string, offset?: number, limit?: number, term?: string, sort?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CategoryListResponse>>>;\n    public getCategories(contentLanguage: string, offset?: number, limit?: number, term?: string, sort?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (contentLanguage === null || contentLanguage === undefined) {\n            throw new Error('Required parameter contentLanguage was null or undefined when calling getCategories.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (offset !== undefined && offset !== null) {\n            queryParameters = queryParameters.set('offset', <any>offset);\n        }\n        if (limit !== undefined && limit !== null) {\n            queryParameters = queryParameters.set('limit', <any>limit);\n        }\n        if (term !== undefined && term !== null) {\n            queryParameters = queryParameters.set('term', <any>term);\n        }\n        if (sort !== undefined && sort !== null) {\n            queryParameters = queryParameters.set('sort', <any>sort);\n        }\n\n        let headers = this.defaultHeaders;\n        if (contentLanguage !== undefined && contentLanguage !== null) {\n            headers = headers.set('Content-Language', String(contentLanguage));\n        }\n\n        // authentication (bearer) required\n        if (this.configuration.apiKeys[\"Authorization\"]) {\n            headers = headers.set('Authorization', this.configuration.apiKeys[\"Authorization\"]);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get(`${this.basePath}/api/adm/categories`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Fetches category details for admin\n     * \n     * @param contentLanguage \n     * @param id Campaign id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getCategory(contentLanguage: string, id: string, observe?: 'body', reportProgress?: boolean): Observable<CategoryResponse>;\n    public getCategory(contentLanguage: string, id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CategoryResponse>>;\n    public getCategory(contentLanguage: string, id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CategoryResponse>>;\n    public getCategory(contentLanguage: string, id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (contentLanguage === null || contentLanguage === undefined) {\n            throw new Error('Required parameter contentLanguage was null or undefined when calling getCategory.');\n        }\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling getCategory.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (contentLanguage !== undefined && contentLanguage !== null) {\n            headers = headers.set('Content-Language', String(contentLanguage));\n        }\n\n        // authentication (bearer) required\n        if (this.configuration.apiKeys[\"Authorization\"]) {\n            headers = headers.set('Authorization', this.configuration.apiKeys[\"Authorization\"]);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get(`${this.basePath}/api/adm/categories/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Add Category\n     * \n     * @param contentLanguage \n     * @param body Category details will be add\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public saveCategory(contentLanguage: string, body?: CategoryRequest, observe?: 'body', reportProgress?: boolean): Observable<CreatedReponse>;\n    public saveCategory(contentLanguage: string, body?: CategoryRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CreatedReponse>>;\n    public saveCategory(contentLanguage: string, body?: CategoryRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CreatedReponse>>;\n    public saveCategory(contentLanguage: string, body?: CategoryRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (contentLanguage === null || contentLanguage === undefined) {\n            throw new Error('Required parameter contentLanguage was null or undefined when calling saveCategory.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (contentLanguage !== undefined && contentLanguage !== null) {\n            headers = headers.set('Content-Language', String(contentLanguage));\n        }\n\n        // authentication (bearer) required\n        if (this.configuration.apiKeys[\"Authorization\"]) {\n            headers = headers.set('Authorization', this.configuration.apiKeys[\"Authorization\"]);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post(`${this.basePath}/api/adm/categories`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update Category\n     * \n     * @param contentLanguage \n     * @param id Category id\n     * @param body Ticket details will be add\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateCategory(contentLanguage: string, id: string, body?: CategoryRequest, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public updateCategory(contentLanguage: string, id: string, body?: CategoryRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public updateCategory(contentLanguage: string, id: string, body?: CategoryRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public updateCategory(contentLanguage: string, id: string, body?: CategoryRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (contentLanguage === null || contentLanguage === undefined) {\n            throw new Error('Required parameter contentLanguage was null or undefined when calling updateCategory.');\n        }\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling updateCategory.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (contentLanguage !== undefined && contentLanguage !== null) {\n            headers = headers.set('Content-Language', String(contentLanguage));\n        }\n\n        // authentication (bearer) required\n        if (this.configuration.apiKeys[\"Authorization\"]) {\n            headers = headers.set('Authorization', this.configuration.apiKeys[\"Authorization\"]);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.put(`${this.basePath}/api/adm/categories/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n",
    "/**\n * CRM Service Api\n * This is a sample server of MySki Miles Cfa services. For this sample, you can use the `access-token` to test the authorization filters.\n *\n * OpenAPI spec version: 1.0.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs/Observable';\n\nimport { CampaignSummary } from '../model/campaignSummary';\nimport { CategoriesSummary } from '../model/categoriesSummary';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class CampaignApplicationService {\n\n    protected basePath = 'http://localhost:5000';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Fetches active categories list for user\n     * \n     * @param xDeviceHash \n     * @param contentLanguage \n     * @param offset The number of items to skip before starting to collect the result set.\n     * @param limit The numbers of items to return.\n     * @param term Filter argument in which to retrieve the results. Basic text search on relevant fields\n     * @param sort Order in which to retrieve the results. Multiple sort criteria can not be passed\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getAllCategories(xDeviceHash: string, contentLanguage: string, offset?: number, limit?: number, term?: string, sort?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<CategoriesSummary>>;\n    public getAllCategories(xDeviceHash: string, contentLanguage: string, offset?: number, limit?: number, term?: string, sort?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CategoriesSummary>>>;\n    public getAllCategories(xDeviceHash: string, contentLanguage: string, offset?: number, limit?: number, term?: string, sort?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CategoriesSummary>>>;\n    public getAllCategories(xDeviceHash: string, contentLanguage: string, offset?: number, limit?: number, term?: string, sort?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (xDeviceHash === null || xDeviceHash === undefined) {\n            throw new Error('Required parameter xDeviceHash was null or undefined when calling getAllCategories.');\n        }\n        if (contentLanguage === null || contentLanguage === undefined) {\n            throw new Error('Required parameter contentLanguage was null or undefined when calling getAllCategories.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (offset !== undefined && offset !== null) {\n            queryParameters = queryParameters.set('offset', <any>offset);\n        }\n        if (limit !== undefined && limit !== null) {\n            queryParameters = queryParameters.set('limit', <any>limit);\n        }\n        if (term !== undefined && term !== null) {\n            queryParameters = queryParameters.set('term', <any>term);\n        }\n        if (sort !== undefined && sort !== null) {\n            queryParameters = queryParameters.set('sort', <any>sort);\n        }\n\n        let headers = this.defaultHeaders;\n        if (xDeviceHash !== undefined && xDeviceHash !== null) {\n            headers = headers.set('X-Device-Hash', String(xDeviceHash));\n        }\n        if (contentLanguage !== undefined && contentLanguage !== null) {\n            headers = headers.set('Content-Language', String(contentLanguage));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get(`${this.basePath}/api/app/campaigns/categories`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Fetches active campaigns list for user\n     * \n     * @param xDeviceHash \n     * @param contentLanguage \n     * @param offset The number of items to skip before starting to collect the result set.\n     * @param limit The numbers of items to return.\n     * @param term Filter argument in which to retrieve the results. Basic text search on relevant fields\n     * @param sort Order in which to retrieve the results. Multiple sort criteria can not be passed\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getAppCampaings(xDeviceHash: string, contentLanguage: string, offset?: number, limit?: number, term?: string, sort?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<CampaignSummary>>;\n    public getAppCampaings(xDeviceHash: string, contentLanguage: string, offset?: number, limit?: number, term?: string, sort?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CampaignSummary>>>;\n    public getAppCampaings(xDeviceHash: string, contentLanguage: string, offset?: number, limit?: number, term?: string, sort?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CampaignSummary>>>;\n    public getAppCampaings(xDeviceHash: string, contentLanguage: string, offset?: number, limit?: number, term?: string, sort?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (xDeviceHash === null || xDeviceHash === undefined) {\n            throw new Error('Required parameter xDeviceHash was null or undefined when calling getAppCampaings.');\n        }\n        if (contentLanguage === null || contentLanguage === undefined) {\n            throw new Error('Required parameter contentLanguage was null or undefined when calling getAppCampaings.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (offset !== undefined && offset !== null) {\n            queryParameters = queryParameters.set('offset', <any>offset);\n        }\n        if (limit !== undefined && limit !== null) {\n            queryParameters = queryParameters.set('limit', <any>limit);\n        }\n        if (term !== undefined && term !== null) {\n            queryParameters = queryParameters.set('term', <any>term);\n        }\n        if (sort !== undefined && sort !== null) {\n            queryParameters = queryParameters.set('sort', <any>sort);\n        }\n\n        let headers = this.defaultHeaders;\n        if (xDeviceHash !== undefined && xDeviceHash !== null) {\n            headers = headers.set('X-Device-Hash', String(xDeviceHash));\n        }\n        if (contentLanguage !== undefined && contentLanguage !== null) {\n            headers = headers.set('Content-Language', String(contentLanguage));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get(`${this.basePath}/api/app/campaigns`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Fetches active campaigns according to category id\n     * \n     * @param xDeviceHash \n     * @param contentLanguage \n     * @param categoryId Category id\n     * @param offset The number of items to skip before starting to collect the result set.\n     * @param limit The numbers of items to return.\n     * @param term Filter argument in which to retrieve the results. Basic text search on relevant fields\n     * @param sort Order in which to retrieve the results. Multiple sort criteria can not be passed\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getCampaingByCategoryId(xDeviceHash: string, contentLanguage: string, categoryId: string, offset?: number, limit?: number, term?: string, sort?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<CampaignSummary>>;\n    public getCampaingByCategoryId(xDeviceHash: string, contentLanguage: string, categoryId: string, offset?: number, limit?: number, term?: string, sort?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CampaignSummary>>>;\n    public getCampaingByCategoryId(xDeviceHash: string, contentLanguage: string, categoryId: string, offset?: number, limit?: number, term?: string, sort?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CampaignSummary>>>;\n    public getCampaingByCategoryId(xDeviceHash: string, contentLanguage: string, categoryId: string, offset?: number, limit?: number, term?: string, sort?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (xDeviceHash === null || xDeviceHash === undefined) {\n            throw new Error('Required parameter xDeviceHash was null or undefined when calling getCampaingByCategoryId.');\n        }\n        if (contentLanguage === null || contentLanguage === undefined) {\n            throw new Error('Required parameter contentLanguage was null or undefined when calling getCampaingByCategoryId.');\n        }\n        if (categoryId === null || categoryId === undefined) {\n            throw new Error('Required parameter categoryId was null or undefined when calling getCampaingByCategoryId.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (offset !== undefined && offset !== null) {\n            queryParameters = queryParameters.set('offset', <any>offset);\n        }\n        if (limit !== undefined && limit !== null) {\n            queryParameters = queryParameters.set('limit', <any>limit);\n        }\n        if (term !== undefined && term !== null) {\n            queryParameters = queryParameters.set('term', <any>term);\n        }\n        if (sort !== undefined && sort !== null) {\n            queryParameters = queryParameters.set('sort', <any>sort);\n        }\n\n        let headers = this.defaultHeaders;\n        if (xDeviceHash !== undefined && xDeviceHash !== null) {\n            headers = headers.set('X-Device-Hash', String(xDeviceHash));\n        }\n        if (contentLanguage !== undefined && contentLanguage !== null) {\n            headers = headers.set('Content-Language', String(contentLanguage));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get(`${this.basePath}/api/app/campaigns/categories/${encodeURIComponent(String(categoryId))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n",
    "/**\n * CRM Service Api\n * This is a sample server of MySki Miles Cfa services. For this sample, you can use the `access-token` to test the authorization filters.\n *\n * OpenAPI spec version: 1.0.0\n *\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional } from \"@angular/core\";\nimport {\n  HttpClient,\n  HttpHeaders,\n  HttpParams,\n  HttpResponse,\n  HttpEvent\n} from \"@angular/common/http\";\nimport { CustomHttpUrlEncodingCodec } from \"../encoder\";\n\nimport { Observable } from \"rxjs/Observable\";\n\nimport { Campaign } from \"../model/campaign\";\nimport { CampaignList } from \"../model/campaignList\";\nimport { ErrorReponse } from \"../model/errorReponse\";\n\nimport { BASE_PATH, COLLECTION_FORMATS } from \"../variables\";\nimport { Configuration } from \"../configuration\";\n\n@Injectable()\nexport class CampaignAdminService {\n  protected basePath = \"http://localhost:5000\";\n  public defaultHeaders = new HttpHeaders();\n  public configuration = new Configuration();\n\n  constructor(\n    protected httpClient: HttpClient,\n    @Optional() @Inject(BASE_PATH) basePath: string,\n    @Optional() configuration: Configuration\n  ) {\n    if (basePath) {\n      this.basePath = basePath;\n    }\n    if (configuration) {\n      this.configuration = configuration;\n      this.basePath = basePath || configuration.basePath || this.basePath;\n    }\n  }\n\n  /**\n   * @param consumes string[] mime-types\n   * @return true: consumes contains 'multipart/form-data', false: otherwise\n   */\n  private canConsumeForm(consumes: string[]): boolean {\n    const form = \"multipart/form-data\";\n    for (const consume of consumes) {\n      if (form === consume) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Fetches campaign details for admin\n   *\n   * @param contentLanguage\n   * @param id Campaign id\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getCampaign(\n    contentLanguage: string,\n    id: string,\n    observe?: \"body\",\n    reportProgress?: boolean\n  ): Observable<Campaign>;\n  public getCampaign(\n    contentLanguage: string,\n    id: string,\n    observe?: \"response\",\n    reportProgress?: boolean\n  ): Observable<HttpResponse<Campaign>>;\n  public getCampaign(\n    contentLanguage: string,\n    id: string,\n    observe?: \"events\",\n    reportProgress?: boolean\n  ): Observable<HttpEvent<Campaign>>;\n  public getCampaign(\n    contentLanguage: string,\n    id: string,\n    observe: any = \"body\",\n    reportProgress: boolean = false\n  ): Observable<any> {\n    if (contentLanguage === null || contentLanguage === undefined) {\n      throw new Error(\n        \"Required parameter contentLanguage was null or undefined when calling getCampaign.\"\n      );\n    }\n    if (id === null || id === undefined) {\n      throw new Error(\n        \"Required parameter id was null or undefined when calling getCampaign.\"\n      );\n    }\n\n    let headers = this.defaultHeaders;\n    if (contentLanguage !== undefined && contentLanguage !== null) {\n      headers = headers.set(\"Content-Language\", String(contentLanguage));\n    }\n\n    // authentication (bearer) required\n    if (this.configuration.apiKeys[\"Authorization\"]) {\n      headers = headers.set(\n        \"Authorization\",\n        this.configuration.apiKeys[\"Authorization\"]\n      );\n    }\n\n    // to determine the Accept header\n    let httpHeaderAccepts: string[] = [\"application/json\"];\n    const httpHeaderAcceptSelected:\n      | string\n      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    if (httpHeaderAcceptSelected != undefined) {\n      headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n    }\n\n    // to determine the Content-Type header\n    const consumes: string[] = [];\n\n    return this.httpClient.get(\n      `${this.basePath}/api/adm/campaigns/${encodeURIComponent(String(id))}`,\n      {\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress\n      }\n    );\n  }\n\n  /**\n   * Fetches active campaigns list for user\n   *\n   * @param xDeviceHash\n   * @param contentLanguage\n   * @param offset The number of items to skip before starting to collect the result set.\n   * @param limit The numbers of items to return.\n   * @param term Filter argument in which to retrieve the results. Basic text search on relevant fields\n   * @param sort Order in which to retrieve the results. Multiple sort criteria can not be passed\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getCampaings(\n    xDeviceHash: string,\n    contentLanguage: string,\n    offset?: number,\n    limit?: number,\n    term?: string,\n    sort?: string,\n    observe?: \"body\",\n    reportProgress?: boolean\n  ): Observable<Array<CampaignList>>;\n  public getCampaings(\n    xDeviceHash: string,\n    contentLanguage: string,\n    offset?: number,\n    limit?: number,\n    term?: string,\n    sort?: string,\n    observe?: \"response\",\n    reportProgress?: boolean\n  ): Observable<HttpResponse<Array<CampaignList>>>;\n  public getCampaings(\n    xDeviceHash: string,\n    contentLanguage: string,\n    offset?: number,\n    limit?: number,\n    term?: string,\n    sort?: string,\n    observe?: \"events\",\n    reportProgress?: boolean\n  ): Observable<HttpEvent<Array<CampaignList>>>;\n  public getCampaings(\n    xDeviceHash: string,\n    contentLanguage: string,\n    offset?: number,\n    limit?: number,\n    term?: string,\n    sort?: string,\n    observe: any = \"body\",\n    reportProgress: boolean = false\n  ): Observable<any> {\n    if (xDeviceHash === null || xDeviceHash === undefined) {\n      throw new Error(\n        \"Required parameter xDeviceHash was null or undefined when calling getCampaings.\"\n      );\n    }\n    if (contentLanguage === null || contentLanguage === undefined) {\n      throw new Error(\n        \"Required parameter contentLanguage was null or undefined when calling getCampaings.\"\n      );\n    }\n\n    let queryParameters = new HttpParams({\n      encoder: new CustomHttpUrlEncodingCodec()\n    });\n    if (offset !== undefined && offset !== null) {\n      queryParameters = queryParameters.set(\"offset\", <any>offset);\n    }\n    if (limit !== undefined && limit !== null) {\n      queryParameters = queryParameters.set(\"limit\", <any>limit);\n    }\n    if (term !== undefined && term !== null) {\n      queryParameters = queryParameters.set(\"term\", <any>term);\n    }\n    if (sort !== undefined && sort !== null) {\n      queryParameters = queryParameters.set(\"sort\", <any>sort);\n    }\n\n    let headers = this.defaultHeaders;\n    if (xDeviceHash !== undefined && xDeviceHash !== null) {\n      headers = headers.set(\"X-Device-Hash\", String(xDeviceHash));\n    }\n    if (contentLanguage !== undefined && contentLanguage !== null) {\n      headers = headers.set(\"Content-Language\", String(contentLanguage));\n    }\n\n    // authentication (bearer) required\n    if (this.configuration.apiKeys[\"Authorization\"]) {\n      headers = headers.set(\n        \"Authorization\",\n        this.configuration.apiKeys[\"Authorization\"]\n      );\n    }\n\n    // to determine the Accept header\n    let httpHeaderAccepts: string[] = [\"application/json\"];\n    const httpHeaderAcceptSelected:\n      | string\n      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    if (httpHeaderAcceptSelected != undefined) {\n      headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n    }\n\n    // to determine the Content-Type header\n    const consumes: string[] = [];\n\n    return this.httpClient.get(`${this.basePath}/api/adm/campaigns`, {\n      params: queryParameters,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  /**\n   * Add Campaign\n   *\n   * @param xDeviceHash\n   * @param contentLanguage\n   * @param body Ticket details will be add\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public saveCampaign(\n    xDeviceHash: string,\n    contentLanguage: string,\n    body?: Campaign,\n    observe?: \"body\",\n    reportProgress?: boolean\n  ): Observable<any>;\n  public saveCampaign(\n    xDeviceHash: string,\n    contentLanguage: string,\n    body?: Campaign,\n    observe?: \"response\",\n    reportProgress?: boolean\n  ): Observable<HttpResponse<any>>;\n  public saveCampaign(\n    xDeviceHash: string,\n    contentLanguage: string,\n    body?: Campaign,\n    observe?: \"events\",\n    reportProgress?: boolean\n  ): Observable<HttpEvent<any>>;\n  public saveCampaign(\n    xDeviceHash: string,\n    contentLanguage: string,\n    body?: Campaign,\n    observe: any = \"body\",\n    reportProgress: boolean = false\n  ): Observable<any> {\n    if (xDeviceHash === null || xDeviceHash === undefined) {\n      throw new Error(\n        \"Required parameter xDeviceHash was null or undefined when calling saveCampaign.\"\n      );\n    }\n    if (contentLanguage === null || contentLanguage === undefined) {\n      throw new Error(\n        \"Required parameter contentLanguage was null or undefined when calling saveCampaign.\"\n      );\n    }\n\n    let headers = this.defaultHeaders;\n    if (xDeviceHash !== undefined && xDeviceHash !== null) {\n      headers = headers.set(\"X-Device-Hash\", String(xDeviceHash));\n    }\n    if (contentLanguage !== undefined && contentLanguage !== null) {\n      headers = headers.set(\"Content-Language\", String(contentLanguage));\n    }\n\n    // authentication (bearer) required\n    if (this.configuration.apiKeys[\"Authorization\"]) {\n      headers = headers.set(\n        \"Authorization\",\n        this.configuration.apiKeys[\"Authorization\"]\n      );\n    }\n\n    // to determine the Accept header\n    let httpHeaderAccepts: string[] = [];\n    const httpHeaderAcceptSelected:\n      | string\n      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    if (httpHeaderAcceptSelected != undefined) {\n      headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n    }\n\n    // to determine the Content-Type header\n    const consumes: string[] = [];\n    const httpContentTypeSelected:\n      | string\n      | undefined = this.configuration.selectHeaderContentType(consumes);\n    if (httpContentTypeSelected != undefined) {\n      headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n    }\n\n    return this.httpClient.post(`${this.basePath}/api/adm/campaigns`, body, {\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  /**\n   * Update Campaign\n   *\n   * @param xDeviceHash\n   * @param contentLanguage\n   * @param id Campign id\n   * @param body Ticket details will be add\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public updateCampaign(\n    xDeviceHash: string,\n    contentLanguage: string,\n    id: string,\n    body?: Campaign,\n    observe?: \"body\",\n    reportProgress?: boolean\n  ): Observable<any>;\n  public updateCampaign(\n    xDeviceHash: string,\n    contentLanguage: string,\n    id: string,\n    body?: Campaign,\n    observe?: \"response\",\n    reportProgress?: boolean\n  ): Observable<HttpResponse<any>>;\n  public updateCampaign(\n    xDeviceHash: string,\n    contentLanguage: string,\n    id: string,\n    body?: Campaign,\n    observe?: \"events\",\n    reportProgress?: boolean\n  ): Observable<HttpEvent<any>>;\n  public updateCampaign(\n    xDeviceHash: string,\n    contentLanguage: string,\n    id: string,\n    body?: Campaign,\n    observe: any = \"body\",\n    reportProgress: boolean = false\n  ): Observable<any> {\n    if (xDeviceHash === null || xDeviceHash === undefined) {\n      throw new Error(\n        \"Required parameter xDeviceHash was null or undefined when calling updateCampaign.\"\n      );\n    }\n    if (contentLanguage === null || contentLanguage === undefined) {\n      throw new Error(\n        \"Required parameter contentLanguage was null or undefined when calling updateCampaign.\"\n      );\n    }\n    if (id === null || id === undefined) {\n      throw new Error(\n        \"Required parameter id was null or undefined when calling updateCampaign.\"\n      );\n    }\n\n    let headers = this.defaultHeaders;\n    if (xDeviceHash !== undefined && xDeviceHash !== null) {\n      headers = headers.set(\"X-Device-Hash\", String(xDeviceHash));\n    }\n    if (contentLanguage !== undefined && contentLanguage !== null) {\n      headers = headers.set(\"Content-Language\", String(contentLanguage));\n    }\n\n    // authentication (bearer) required\n    if (this.configuration.apiKeys[\"Authorization\"]) {\n      headers = headers.set(\n        \"Authorization\",\n        this.configuration.apiKeys[\"Authorization\"]\n      );\n    }\n\n    // to determine the Accept header\n    let httpHeaderAccepts: string[] = [];\n    const httpHeaderAcceptSelected:\n      | string\n      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    if (httpHeaderAcceptSelected != undefined) {\n      headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n    }\n\n    // to determine the Content-Type header\n    const consumes: string[] = [];\n    const httpContentTypeSelected:\n      | string\n      | undefined = this.configuration.selectHeaderContentType(consumes);\n    if (httpContentTypeSelected != undefined) {\n      headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n    }\n\n    return this.httpClient.put(\n      `${this.basePath}/api/adm/campaigns/${encodeURIComponent(String(id))}`,\n      {\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress\n      }\n    );\n  }\n}\n",
    "export interface ConfigurationParameters {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n}\n\nexport class Configuration {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n\n    constructor(configurationParameters: ConfigurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n    }\n\n    /**\n     * Select the correct content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param contentTypes - the array of content types that are available for selection\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderContentType (contentTypes: string[]): string | undefined {\n        if (contentTypes.length == 0) {\n            return undefined;\n        }\n\n        let type = contentTypes.find(x => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n\n    /**\n     * Select the correct accept content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct accept content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param accepts - the array of content types that are available for selection.\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderAccept(accepts: string[]): string | undefined {\n        if (accepts.length == 0) {\n            return undefined;\n        }\n\n        let type = accepts.find(x => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime != null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n}\n",
    "import { InjectionToken } from '@angular/core';\n\nexport const BASE_PATH = new InjectionToken<string>('basePath');\nexport const COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n}\n",
    "    import { HttpUrlEncodingCodec } from '@angular/common/http';\n\n/**\n* CustomHttpUrlEncodingCodec\n* Fix plus sign (+) not encoding, so sent as blank space\n* See: https://github.com/angular/angular/issues/11058#issuecomment-247367318\n*/\nexport class CustomHttpUrlEncodingCodec extends HttpUrlEncodingCodec {\n    encodeKey(k: string): string {\n        k = super.encodeKey(k);\n        return k.replace(/\\+/gi, '%2B');\n    }\n    encodeValue(v: string): string {\n        v = super.encodeValue(v);\n        return v.replace(/\\+/gi, '%2B');\n    }\n}\n\n"
  ],
  "names": [
    "tslib_1.__values",
    "tslib_1.__extends"
  ],
  "mappings": "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"
}
