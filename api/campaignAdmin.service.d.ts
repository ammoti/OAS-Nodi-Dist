/**
 * CRM Service Api
 * This is a sample server of MySki Miles Cfa services. For this sample, you can use the `access-token` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent } from "@angular/common/http";
import { Observable } from "rxjs/Observable";
import { Campaign } from "../model/campaign";
import { CampaignList } from "../model/campaignList";
import { Configuration } from "../configuration";
export declare class CampaignAdminService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm;
    /**
     * Fetches campaign details for admin
     *
     * @param contentLanguage
     * @param id Campaign id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getCampaign(contentLanguage: string, id: string, observe?: "body", reportProgress?: boolean): Observable<Campaign>;
    getCampaign(contentLanguage: string, id: string, observe?: "response", reportProgress?: boolean): Observable<HttpResponse<Campaign>>;
    getCampaign(contentLanguage: string, id: string, observe?: "events", reportProgress?: boolean): Observable<HttpEvent<Campaign>>;
    /**
     * Fetches active campaigns list for user
     *
     * @param xDeviceHash
     * @param contentLanguage
     * @param offset The number of items to skip before starting to collect the result set.
     * @param limit The numbers of items to return.
     * @param term Filter argument in which to retrieve the results. Basic text search on relevant fields
     * @param sort Order in which to retrieve the results. Multiple sort criteria can not be passed
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getCampaings(xDeviceHash: string, contentLanguage: string, offset?: number, limit?: number, term?: string, sort?: string, observe?: "body", reportProgress?: boolean): Observable<Array<CampaignList>>;
    getCampaings(xDeviceHash: string, contentLanguage: string, offset?: number, limit?: number, term?: string, sort?: string, observe?: "response", reportProgress?: boolean): Observable<HttpResponse<Array<CampaignList>>>;
    getCampaings(xDeviceHash: string, contentLanguage: string, offset?: number, limit?: number, term?: string, sort?: string, observe?: "events", reportProgress?: boolean): Observable<HttpEvent<Array<CampaignList>>>;
    /**
     * Add Campaign
     *
     * @param xDeviceHash
     * @param contentLanguage
     * @param body Ticket details will be add
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    saveCampaign(xDeviceHash: string, contentLanguage: string, body?: Campaign, observe?: "body", reportProgress?: boolean): Observable<any>;
    saveCampaign(xDeviceHash: string, contentLanguage: string, body?: Campaign, observe?: "response", reportProgress?: boolean): Observable<HttpResponse<any>>;
    saveCampaign(xDeviceHash: string, contentLanguage: string, body?: Campaign, observe?: "events", reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * Update Campaign
     *
     * @param xDeviceHash
     * @param contentLanguage
     * @param id Campign id
     * @param body Ticket details will be add
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    updateCampaign(xDeviceHash: string, contentLanguage: string, id: string, body?: Campaign, observe?: "body", reportProgress?: boolean): Observable<any>;
    updateCampaign(xDeviceHash: string, contentLanguage: string, id: string, body?: Campaign, observe?: "response", reportProgress?: boolean): Observable<HttpResponse<any>>;
    updateCampaign(xDeviceHash: string, contentLanguage: string, id: string, body?: Campaign, observe?: "events", reportProgress?: boolean): Observable<HttpEvent<any>>;
}
