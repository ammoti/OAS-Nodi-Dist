/**
 * CRM Service Api
 * This is a sample server of MySki Miles Cfa services. For this sample, you can use the `access-token` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs/Observable';
import { CampaignSummary } from '../model/campaignSummary';
import { CategoriesSummary } from '../model/categoriesSummary';
import { Configuration } from '../configuration';
export declare class CampaignApplicationService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm;
    /**
     * Fetches active categories list for user
     *
     * @param xDeviceHash
     * @param contentLanguage
     * @param offset The number of items to skip before starting to collect the result set.
     * @param limit The numbers of items to return.
     * @param term Filter argument in which to retrieve the results. Basic text search on relevant fields
     * @param sort Order in which to retrieve the results. Multiple sort criteria can not be passed
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getAllCategories(xDeviceHash: string, contentLanguage: string, offset?: number, limit?: number, term?: string, sort?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<CategoriesSummary>>;
    getAllCategories(xDeviceHash: string, contentLanguage: string, offset?: number, limit?: number, term?: string, sort?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CategoriesSummary>>>;
    getAllCategories(xDeviceHash: string, contentLanguage: string, offset?: number, limit?: number, term?: string, sort?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CategoriesSummary>>>;
    /**
     * Fetches active campaigns list for user
     *
     * @param xDeviceHash
     * @param contentLanguage
     * @param offset The number of items to skip before starting to collect the result set.
     * @param limit The numbers of items to return.
     * @param term Filter argument in which to retrieve the results. Basic text search on relevant fields
     * @param sort Order in which to retrieve the results. Multiple sort criteria can not be passed
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getAppCampaings(xDeviceHash: string, contentLanguage: string, offset?: number, limit?: number, term?: string, sort?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<CampaignSummary>>;
    getAppCampaings(xDeviceHash: string, contentLanguage: string, offset?: number, limit?: number, term?: string, sort?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CampaignSummary>>>;
    getAppCampaings(xDeviceHash: string, contentLanguage: string, offset?: number, limit?: number, term?: string, sort?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CampaignSummary>>>;
    /**
     * Fetches active campaigns according to category id
     *
     * @param xDeviceHash
     * @param contentLanguage
     * @param categoryId Category id
     * @param offset The number of items to skip before starting to collect the result set.
     * @param limit The numbers of items to return.
     * @param term Filter argument in which to retrieve the results. Basic text search on relevant fields
     * @param sort Order in which to retrieve the results. Multiple sort criteria can not be passed
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getCampaingByCategoryId(xDeviceHash: string, contentLanguage: string, categoryId: string, offset?: number, limit?: number, term?: string, sort?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<CampaignSummary>>;
    getCampaingByCategoryId(xDeviceHash: string, contentLanguage: string, categoryId: string, offset?: number, limit?: number, term?: string, sort?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CampaignSummary>>>;
    getCampaingByCategoryId(xDeviceHash: string, contentLanguage: string, categoryId: string, offset?: number, limit?: number, term?: string, sort?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CampaignSummary>>>;
}
