/**
 * CRM Service Api
 * This is a sample server of MySki Miles Cfa services. For this sample, you can use the `access-token` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs/Observable';
import { CategoryListResponse } from '../model/categoryListResponse';
import { CategoryRequest } from '../model/categoryRequest';
import { CategoryResponse } from '../model/categoryResponse';
import { CreatedReponse } from '../model/createdReponse';
import { Configuration } from '../configuration';
export declare class CategoriesAdminService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm;
    /**
     * Delete Category
     *
     * @param contentLanguage
     * @param id Category id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    deleteCategory(contentLanguage: string, id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    deleteCategory(contentLanguage: string, id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    deleteCategory(contentLanguage: string, id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * Fetches active categories list for admin
     *
     * @param contentLanguage
     * @param offset The number of items to skip before starting to collect the result set.
     * @param limit The numbers of items to return.
     * @param term Filter argument in which to retrieve the results. Basic text search on relevant fields
     * @param sort Order in which to retrieve the results. Multiple sort criteria can not be passed
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getCategories(contentLanguage: string, offset?: number, limit?: number, term?: string, sort?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<CategoryListResponse>>;
    getCategories(contentLanguage: string, offset?: number, limit?: number, term?: string, sort?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CategoryListResponse>>>;
    getCategories(contentLanguage: string, offset?: number, limit?: number, term?: string, sort?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CategoryListResponse>>>;
    /**
     * Fetches category details for admin
     *
     * @param contentLanguage
     * @param id Campaign id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getCategory(contentLanguage: string, id: string, observe?: 'body', reportProgress?: boolean): Observable<CategoryResponse>;
    getCategory(contentLanguage: string, id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CategoryResponse>>;
    getCategory(contentLanguage: string, id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CategoryResponse>>;
    /**
     * Add Category
     *
     * @param contentLanguage
     * @param body Category details will be add
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    saveCategory(contentLanguage: string, body?: CategoryRequest, observe?: 'body', reportProgress?: boolean): Observable<CreatedReponse>;
    saveCategory(contentLanguage: string, body?: CategoryRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CreatedReponse>>;
    saveCategory(contentLanguage: string, body?: CategoryRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CreatedReponse>>;
    /**
     * Update Category
     *
     * @param contentLanguage
     * @param id Category id
     * @param body Ticket details will be add
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    updateCategory(contentLanguage: string, id: string, body?: CategoryRequest, observe?: 'body', reportProgress?: boolean): Observable<any>;
    updateCategory(contentLanguage: string, id: string, body?: CategoryRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    updateCategory(contentLanguage: string, id: string, body?: CategoryRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
}
