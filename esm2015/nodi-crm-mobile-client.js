import { HttpUrlEncodingCodec, HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
import { InjectionToken, Inject, Injectable, Optional, NgModule, SkipSelf } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * CustomHttpUrlEncodingCodec
 * Fix plus sign (+) not encoding, so sent as blank space
 * See: https://github.com/angular/angular/issues/11058#issuecomment-247367318
 */
class CustomHttpUrlEncodingCodec extends HttpUrlEncodingCodec {
    /**
     * @param {?} k
     * @return {?}
     */
    encodeKey(k) {
        k = super.encodeKey(k);
        return k.replace(/\+/gi, '%2B');
    }
    /**
     * @param {?} v
     * @return {?}
     */
    encodeValue(v) {
        v = super.encodeValue(v);
        return v.replace(/\+/gi, '%2B');
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const BASE_PATH = new InjectionToken('basePath');
/** @type {?} */
const COLLECTION_FORMATS = {
    'csv': ',',
    'tsv': '   ',
    'ssv': ' ',
    'pipes': '|'
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */

class Configuration {
    /**
     * @param {?=} configurationParameters
     */
    constructor(configurationParameters = {}) {
        this.apiKeys = configurationParameters.apiKeys;
        this.username = configurationParameters.username;
        this.password = configurationParameters.password;
        this.accessToken = configurationParameters.accessToken;
        this.basePath = configurationParameters.basePath;
        this.withCredentials = configurationParameters.withCredentials;
    }
    /**
     * Select the correct content-type to use for a request.
     * Uses {\@link Configuration#isJsonMime} to determine the correct content-type.
     * If no content type is found return the first found type if the contentTypes is not empty
     * @param {?} contentTypes - the array of content types that are available for selection
     * @return {?} the selected content-type or <code>undefined</code> if no selection could be made.
     */
    selectHeaderContentType(contentTypes) {
        if (contentTypes.length == 0) {
            return undefined;
        }
        /** @type {?} */
        let type = contentTypes.find((/**
         * @param {?} x
         * @return {?}
         */
        x => this.isJsonMime(x)));
        if (type === undefined) {
            return contentTypes[0];
        }
        return type;
    }
    /**
     * Select the correct accept content-type to use for a request.
     * Uses {\@link Configuration#isJsonMime} to determine the correct accept content-type.
     * If no content type is found return the first found type if the contentTypes is not empty
     * @param {?} accepts - the array of content types that are available for selection.
     * @return {?} the selected content-type or <code>undefined</code> if no selection could be made.
     */
    selectHeaderAccept(accepts) {
        if (accepts.length == 0) {
            return undefined;
        }
        /** @type {?} */
        let type = accepts.find((/**
         * @param {?} x
         * @return {?}
         */
        x => this.isJsonMime(x)));
        if (type === undefined) {
            return accepts[0];
        }
        return type;
    }
    /**
     * Check if the given MIME is a JSON MIME.
     * JSON MIME examples:
     *   application/json
     *   application/json; charset=UTF8
     *   APPLICATION/JSON
     *   application/vnd.company+json
     * @param {?} mime - MIME (Multipurpose Internet Mail Extensions)
     * @return {?} True if the given MIME is JSON, false otherwise.
     */
    isJsonMime(mime) {
        /** @type {?} */
        const jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
        return mime != null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * CRM Service Api
 * This is a sample server of MySki Miles Cfa services. For this sample, you can use the `access-token` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */
class CampaignAdminService {
    /**
     * @param {?} httpClient
     * @param {?} basePath
     * @param {?} configuration
     */
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = "http://localhost:5000";
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new Configuration();
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }
    /**
     * @private
     * @param {?} consumes string[] mime-types
     * @return {?} true: consumes contains 'multipart/form-data', false: otherwise
     */
    canConsumeForm(consumes) {
        /** @type {?} */
        const form = "multipart/form-data";
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }
    /**
     * @param {?} contentLanguage
     * @param {?} id
     * @param {?=} observe
     * @param {?=} reportProgress
     * @return {?}
     */
    getCampaign(contentLanguage, id, observe = "body", reportProgress = false) {
        if (contentLanguage === null || contentLanguage === undefined) {
            throw new Error("Required parameter contentLanguage was null or undefined when calling getCampaign.");
        }
        if (id === null || id === undefined) {
            throw new Error("Required parameter id was null or undefined when calling getCampaign.");
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (contentLanguage !== undefined && contentLanguage !== null) {
            headers = headers.set("Content-Language", String(contentLanguage));
        }
        // authentication (bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set("Authorization", this.configuration.apiKeys["Authorization"]);
        }
        // to determine the Accept header
        /** @type {?} */
        let httpHeaderAccepts = ["application/json"];
        /** @type {?} */
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        /** @type {?} */
        return this.httpClient.get(`${this.basePath}/api/adm/campaigns/${encodeURIComponent(String(id))}`, {
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} xDeviceHash
     * @param {?} contentLanguage
     * @param {?=} offset
     * @param {?=} limit
     * @param {?=} term
     * @param {?=} sort
     * @param {?=} observe
     * @param {?=} reportProgress
     * @return {?}
     */
    getCampaings(xDeviceHash, contentLanguage, offset, limit, term, sort, observe = "body", reportProgress = false) {
        if (xDeviceHash === null || xDeviceHash === undefined) {
            throw new Error("Required parameter xDeviceHash was null or undefined when calling getCampaings.");
        }
        if (contentLanguage === null || contentLanguage === undefined) {
            throw new Error("Required parameter contentLanguage was null or undefined when calling getCampaings.");
        }
        /** @type {?} */
        let queryParameters = new HttpParams({
            encoder: new CustomHttpUrlEncodingCodec()
        });
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set("offset", (/** @type {?} */ (offset)));
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set("limit", (/** @type {?} */ (limit)));
        }
        if (term !== undefined && term !== null) {
            queryParameters = queryParameters.set("term", (/** @type {?} */ (term)));
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set("sort", (/** @type {?} */ (sort)));
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (xDeviceHash !== undefined && xDeviceHash !== null) {
            headers = headers.set("X-Device-Hash", String(xDeviceHash));
        }
        if (contentLanguage !== undefined && contentLanguage !== null) {
            headers = headers.set("Content-Language", String(contentLanguage));
        }
        // authentication (bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set("Authorization", this.configuration.apiKeys["Authorization"]);
        }
        // to determine the Accept header
        /** @type {?} */
        let httpHeaderAccepts = ["application/json"];
        /** @type {?} */
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        /** @type {?} */
        return this.httpClient.get(`${this.basePath}/api/adm/campaigns`, {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} xDeviceHash
     * @param {?} contentLanguage
     * @param {?=} body
     * @param {?=} observe
     * @param {?=} reportProgress
     * @return {?}
     */
    saveCampaign(xDeviceHash, contentLanguage, body, observe = "body", reportProgress = false) {
        if (xDeviceHash === null || xDeviceHash === undefined) {
            throw new Error("Required parameter xDeviceHash was null or undefined when calling saveCampaign.");
        }
        if (contentLanguage === null || contentLanguage === undefined) {
            throw new Error("Required parameter contentLanguage was null or undefined when calling saveCampaign.");
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (xDeviceHash !== undefined && xDeviceHash !== null) {
            headers = headers.set("X-Device-Hash", String(xDeviceHash));
        }
        if (contentLanguage !== undefined && contentLanguage !== null) {
            headers = headers.set("Content-Language", String(contentLanguage));
        }
        // authentication (bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set("Authorization", this.configuration.apiKeys["Authorization"]);
        }
        // to determine the Accept header
        /** @type {?} */
        let httpHeaderAccepts = [];
        /** @type {?} */
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        /** @type {?} */
        const consumes = [];
        /** @type {?} */
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }
        return this.httpClient.post(`${this.basePath}/api/adm/campaigns`, body, {
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} xDeviceHash
     * @param {?} contentLanguage
     * @param {?} id
     * @param {?=} body
     * @param {?=} observe
     * @param {?=} reportProgress
     * @return {?}
     */
    updateCampaign(xDeviceHash, contentLanguage, id, body, observe = "body", reportProgress = false) {
        if (xDeviceHash === null || xDeviceHash === undefined) {
            throw new Error("Required parameter xDeviceHash was null or undefined when calling updateCampaign.");
        }
        if (contentLanguage === null || contentLanguage === undefined) {
            throw new Error("Required parameter contentLanguage was null or undefined when calling updateCampaign.");
        }
        if (id === null || id === undefined) {
            throw new Error("Required parameter id was null or undefined when calling updateCampaign.");
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (xDeviceHash !== undefined && xDeviceHash !== null) {
            headers = headers.set("X-Device-Hash", String(xDeviceHash));
        }
        if (contentLanguage !== undefined && contentLanguage !== null) {
            headers = headers.set("Content-Language", String(contentLanguage));
        }
        // authentication (bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set("Authorization", this.configuration.apiKeys["Authorization"]);
        }
        // to determine the Accept header
        /** @type {?} */
        let httpHeaderAccepts = [];
        /** @type {?} */
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        /** @type {?} */
        const consumes = [];
        /** @type {?} */
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }
        return this.httpClient.put(`${this.basePath}/api/adm/campaigns/${encodeURIComponent(String(id))}`, {
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
}
CampaignAdminService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
CampaignAdminService.ctorParameters = () => [
    { type: HttpClient },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [BASE_PATH,] }] },
    { type: Configuration, decorators: [{ type: Optional }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * CRM Service Api
 * This is a sample server of MySki Miles Cfa services. For this sample, you can use the `access-token` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */
class CampaignApplicationService {
    /**
     * @param {?} httpClient
     * @param {?} basePath
     * @param {?} configuration
     */
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = 'http://localhost:5000';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new Configuration();
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }
    /**
     * @private
     * @param {?} consumes string[] mime-types
     * @return {?} true: consumes contains 'multipart/form-data', false: otherwise
     */
    canConsumeForm(consumes) {
        /** @type {?} */
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }
    /**
     * @param {?} xDeviceHash
     * @param {?} contentLanguage
     * @param {?=} offset
     * @param {?=} limit
     * @param {?=} term
     * @param {?=} sort
     * @param {?=} observe
     * @param {?=} reportProgress
     * @return {?}
     */
    getAllCategories(xDeviceHash, contentLanguage, offset, limit, term, sort, observe = 'body', reportProgress = false) {
        if (xDeviceHash === null || xDeviceHash === undefined) {
            throw new Error('Required parameter xDeviceHash was null or undefined when calling getAllCategories.');
        }
        if (contentLanguage === null || contentLanguage === undefined) {
            throw new Error('Required parameter contentLanguage was null or undefined when calling getAllCategories.');
        }
        /** @type {?} */
        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', (/** @type {?} */ (offset)));
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', (/** @type {?} */ (limit)));
        }
        if (term !== undefined && term !== null) {
            queryParameters = queryParameters.set('term', (/** @type {?} */ (term)));
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', (/** @type {?} */ (sort)));
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (xDeviceHash !== undefined && xDeviceHash !== null) {
            headers = headers.set('X-Device-Hash', String(xDeviceHash));
        }
        if (contentLanguage !== undefined && contentLanguage !== null) {
            headers = headers.set('Content-Language', String(contentLanguage));
        }
        // to determine the Accept header
        /** @type {?} */
        let httpHeaderAccepts = [
            'application/json'
        ];
        /** @type {?} */
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        /** @type {?} */
        return this.httpClient.get(`${this.basePath}/api/app/campaigns/categories`, {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} xDeviceHash
     * @param {?} contentLanguage
     * @param {?=} offset
     * @param {?=} limit
     * @param {?=} term
     * @param {?=} sort
     * @param {?=} observe
     * @param {?=} reportProgress
     * @return {?}
     */
    getAppCampaings(xDeviceHash, contentLanguage, offset, limit, term, sort, observe = 'body', reportProgress = false) {
        if (xDeviceHash === null || xDeviceHash === undefined) {
            throw new Error('Required parameter xDeviceHash was null or undefined when calling getAppCampaings.');
        }
        if (contentLanguage === null || contentLanguage === undefined) {
            throw new Error('Required parameter contentLanguage was null or undefined when calling getAppCampaings.');
        }
        /** @type {?} */
        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', (/** @type {?} */ (offset)));
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', (/** @type {?} */ (limit)));
        }
        if (term !== undefined && term !== null) {
            queryParameters = queryParameters.set('term', (/** @type {?} */ (term)));
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', (/** @type {?} */ (sort)));
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (xDeviceHash !== undefined && xDeviceHash !== null) {
            headers = headers.set('X-Device-Hash', String(xDeviceHash));
        }
        if (contentLanguage !== undefined && contentLanguage !== null) {
            headers = headers.set('Content-Language', String(contentLanguage));
        }
        // to determine the Accept header
        /** @type {?} */
        let httpHeaderAccepts = [
            'application/json'
        ];
        /** @type {?} */
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        /** @type {?} */
        return this.httpClient.get(`${this.basePath}/api/app/campaigns`, {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} xDeviceHash
     * @param {?} contentLanguage
     * @param {?} categoryId
     * @param {?=} offset
     * @param {?=} limit
     * @param {?=} term
     * @param {?=} sort
     * @param {?=} observe
     * @param {?=} reportProgress
     * @return {?}
     */
    getCampaingByCategoryId(xDeviceHash, contentLanguage, categoryId, offset, limit, term, sort, observe = 'body', reportProgress = false) {
        if (xDeviceHash === null || xDeviceHash === undefined) {
            throw new Error('Required parameter xDeviceHash was null or undefined when calling getCampaingByCategoryId.');
        }
        if (contentLanguage === null || contentLanguage === undefined) {
            throw new Error('Required parameter contentLanguage was null or undefined when calling getCampaingByCategoryId.');
        }
        if (categoryId === null || categoryId === undefined) {
            throw new Error('Required parameter categoryId was null or undefined when calling getCampaingByCategoryId.');
        }
        /** @type {?} */
        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', (/** @type {?} */ (offset)));
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', (/** @type {?} */ (limit)));
        }
        if (term !== undefined && term !== null) {
            queryParameters = queryParameters.set('term', (/** @type {?} */ (term)));
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', (/** @type {?} */ (sort)));
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (xDeviceHash !== undefined && xDeviceHash !== null) {
            headers = headers.set('X-Device-Hash', String(xDeviceHash));
        }
        if (contentLanguage !== undefined && contentLanguage !== null) {
            headers = headers.set('Content-Language', String(contentLanguage));
        }
        // to determine the Accept header
        /** @type {?} */
        let httpHeaderAccepts = [
            'application/json'
        ];
        /** @type {?} */
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        /** @type {?} */
        return this.httpClient.get(`${this.basePath}/api/app/campaigns/categories/${encodeURIComponent(String(categoryId))}`, {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
}
CampaignApplicationService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
CampaignApplicationService.ctorParameters = () => [
    { type: HttpClient },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [BASE_PATH,] }] },
    { type: Configuration, decorators: [{ type: Optional }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * CRM Service Api
 * This is a sample server of MySki Miles Cfa services. For this sample, you can use the `access-token` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */
class CategoriesAdminService {
    /**
     * @param {?} httpClient
     * @param {?} basePath
     * @param {?} configuration
     */
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = 'http://localhost:5000';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new Configuration();
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }
    /**
     * @private
     * @param {?} consumes string[] mime-types
     * @return {?} true: consumes contains 'multipart/form-data', false: otherwise
     */
    canConsumeForm(consumes) {
        /** @type {?} */
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }
    /**
     * @param {?} contentLanguage
     * @param {?} id
     * @param {?=} observe
     * @param {?=} reportProgress
     * @return {?}
     */
    deleteCategory(contentLanguage, id, observe = 'body', reportProgress = false) {
        if (contentLanguage === null || contentLanguage === undefined) {
            throw new Error('Required parameter contentLanguage was null or undefined when calling deleteCategory.');
        }
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteCategory.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (contentLanguage !== undefined && contentLanguage !== null) {
            headers = headers.set('Content-Language', String(contentLanguage));
        }
        // authentication (bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        // to determine the Accept header
        /** @type {?} */
        let httpHeaderAccepts = [
            'application/json'
        ];
        /** @type {?} */
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        /** @type {?} */
        return this.httpClient.delete(`${this.basePath}/api/adm/categories/${encodeURIComponent(String(id))}`, {
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} contentLanguage
     * @param {?=} offset
     * @param {?=} limit
     * @param {?=} term
     * @param {?=} sort
     * @param {?=} observe
     * @param {?=} reportProgress
     * @return {?}
     */
    getCategories(contentLanguage, offset, limit, term, sort, observe = 'body', reportProgress = false) {
        if (contentLanguage === null || contentLanguage === undefined) {
            throw new Error('Required parameter contentLanguage was null or undefined when calling getCategories.');
        }
        /** @type {?} */
        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', (/** @type {?} */ (offset)));
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', (/** @type {?} */ (limit)));
        }
        if (term !== undefined && term !== null) {
            queryParameters = queryParameters.set('term', (/** @type {?} */ (term)));
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', (/** @type {?} */ (sort)));
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (contentLanguage !== undefined && contentLanguage !== null) {
            headers = headers.set('Content-Language', String(contentLanguage));
        }
        // authentication (bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        // to determine the Accept header
        /** @type {?} */
        let httpHeaderAccepts = [
            'application/json'
        ];
        /** @type {?} */
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        /** @type {?} */
        return this.httpClient.get(`${this.basePath}/api/adm/categories`, {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} contentLanguage
     * @param {?} id
     * @param {?=} observe
     * @param {?=} reportProgress
     * @return {?}
     */
    getCategory(contentLanguage, id, observe = 'body', reportProgress = false) {
        if (contentLanguage === null || contentLanguage === undefined) {
            throw new Error('Required parameter contentLanguage was null or undefined when calling getCategory.');
        }
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getCategory.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (contentLanguage !== undefined && contentLanguage !== null) {
            headers = headers.set('Content-Language', String(contentLanguage));
        }
        // authentication (bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        // to determine the Accept header
        /** @type {?} */
        let httpHeaderAccepts = [
            'application/json'
        ];
        /** @type {?} */
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        /** @type {?} */
        return this.httpClient.get(`${this.basePath}/api/adm/categories/${encodeURIComponent(String(id))}`, {
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} contentLanguage
     * @param {?=} body
     * @param {?=} observe
     * @param {?=} reportProgress
     * @return {?}
     */
    saveCategory(contentLanguage, body, observe = 'body', reportProgress = false) {
        if (contentLanguage === null || contentLanguage === undefined) {
            throw new Error('Required parameter contentLanguage was null or undefined when calling saveCategory.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (contentLanguage !== undefined && contentLanguage !== null) {
            headers = headers.set('Content-Language', String(contentLanguage));
        }
        // authentication (bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        // to determine the Accept header
        /** @type {?} */
        let httpHeaderAccepts = [
            'application/json'
        ];
        /** @type {?} */
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        /** @type {?} */
        const consumes = [
            'application/json'
        ];
        /** @type {?} */
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        return this.httpClient.post(`${this.basePath}/api/adm/categories`, {
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} contentLanguage
     * @param {?} id
     * @param {?=} body
     * @param {?=} observe
     * @param {?=} reportProgress
     * @return {?}
     */
    updateCategory(contentLanguage, id, body, observe = 'body', reportProgress = false) {
        if (contentLanguage === null || contentLanguage === undefined) {
            throw new Error('Required parameter contentLanguage was null or undefined when calling updateCategory.');
        }
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateCategory.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (contentLanguage !== undefined && contentLanguage !== null) {
            headers = headers.set('Content-Language', String(contentLanguage));
        }
        // authentication (bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        // to determine the Accept header
        /** @type {?} */
        let httpHeaderAccepts = [
            'application/json'
        ];
        /** @type {?} */
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        /** @type {?} */
        const consumes = [
            'application/json'
        ];
        /** @type {?} */
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        return this.httpClient.put(`${this.basePath}/api/adm/categories/${encodeURIComponent(String(id))}`, {
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
}
CategoriesAdminService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
CategoriesAdminService.ctorParameters = () => [
    { type: HttpClient },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [BASE_PATH,] }] },
    { type: Configuration, decorators: [{ type: Optional }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const APIS = [CampaignAdminService, CampaignApplicationService, CategoriesAdminService];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * CRM Service Api
 * This is a sample server of MySki Miles Cfa services. For this sample, you can use the `access-token` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/**
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * CRM Service Api
 * This is a sample server of MySki Miles Cfa services. For this sample, you can use the `access-token` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/**
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * CRM Service Api
 * This is a sample server of MySki Miles Cfa services. For this sample, you can use the `access-token` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/**
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * CRM Service Api
 * This is a sample server of MySki Miles Cfa services. For this sample, you can use the `access-token` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/**
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * CRM Service Api
 * This is a sample server of MySki Miles Cfa services. For this sample, you can use the `access-token` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/**
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * CRM Service Api
 * This is a sample server of MySki Miles Cfa services. For this sample, you can use the `access-token` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/**
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * CRM Service Api
 * This is a sample server of MySki Miles Cfa services. For this sample, you can use the `access-token` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/**
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * CRM Service Api
 * This is a sample server of MySki Miles Cfa services. For this sample, you can use the `access-token` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/**
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ApiModule {
    /**
     * @param {?} parentModule
     * @param {?} http
     */
    constructor(parentModule, http) {
        if (parentModule) {
            throw new Error('ApiModule is already loaded. Import in your base AppModule only.');
        }
        if (!http) {
            throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                'See also https://github.com/angular/angular/issues/20575');
        }
    }
    /**
     * @param {?} configurationFactory
     * @return {?}
     */
    static forRoot(configurationFactory) {
        return {
            ngModule: ApiModule,
            providers: [{ provide: Configuration, useFactory: configurationFactory }]
        };
    }
}
ApiModule.decorators = [
    { type: NgModule, args: [{
                imports: [],
                declarations: [],
                exports: [],
                providers: [
                    CampaignAdminService,
                    CampaignApplicationService,
                    CategoriesAdminService
                ]
            },] },
];
/** @nocollapse */
ApiModule.ctorParameters = () => [
    { type: ApiModule, decorators: [{ type: Optional }, { type: SkipSelf }] },
    { type: HttpClient, decorators: [{ type: Optional }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const ModelConfig = {
    'Campaign': {
        'title': {
            'label': 'label.title', 'widget': 'string',
            'attr': {
                'required': { 'value': true, 'message': 'label.required' }, 'maxLength': { 'value': 15, 'message': 'label.maxlength' }, 'minLength': { 'value': 5, 'message': 'label.minLength' },
            }
        },
        'summary': {
            'label': 'label.summary', 'widget': 'string',
            'attr': {
                'required': { 'value': true, 'message': 'label.required' },
            }
        },
        'detail': {
            'label': 'label.detail', 'widget': 'string',
            'attr': {}
        },
        'isShownHomePage': {
            'label': 'label.isShownHomePage', 'widget': 'checkbox',
            'attr': {}
        },
        'order': {
            'label': 'label.order', 'widget': 'integer',
            'attr': {}
        },
        'coverImage': {
            'label': 'label.coverImage', 'widget': 'string',
            'attr': {}
        },
        'brandId': {
            'label': 'label.brandId', 'widget': 'string',
            'attr': {}
        },
        'categoryId': {
            'label': 'label.categoryId', 'widget': 'string',
            'attr': {}
        },
        'validity': {
            'attr': {}
        },
    },
    'CampaignCategoriesSummary': {
        'id': {
            'attr': {}
        },
        'title': {
            'attr': {}
        },
    },
    'CampaignList': {
        'id': {
            'attr': {}
        },
        'title': {
            'attr': {}
        },
        'isShownHomePage': {
            'attr': {}
        },
        'order': {
            'attr': {}
        },
        'brandName': {
            'attr': {}
        },
        'categoryName': {
            'attr': {}
        },
        'validity': {
            'attr': {}
        },
    },
    'CampaignSummary': {
        'id': {
            'attr': {}
        },
        'title': {
            'attr': {}
        },
        'summary': {
            'attr': {}
        },
        'detail': {
            'attr': {}
        },
        'isShownHomePage': {
            'attr': {}
        },
        'order': {
            'attr': {}
        },
        'coverImage': {
            'attr': {}
        },
        'brandName': {
            'attr': {}
        },
        'category': {
            'attr': {}
        },
        'validity': {
            'attr': {}
        },
    },
    'CategoriesSummary': {
        'id': {
            'attr': {}
        },
        'name': {
            'attr': {}
        },
    },
    'CategoryListResponse': {
        'id': {
            'attr': {}
        },
        'name': {
            'attr': {}
        },
    },
    'CategoryRequest': {
        'id': {
            'attr': {}
        },
        'name': {
            'label': 'label.title', 'widget': 'string',
            'attr': {
                'required': { 'value': true, 'message': 'label.required' },
            }
        },
    },
    'CategoryResponse': {
        'id': {
            'attr': {}
        },
        'name': {
            'attr': {}
        },
    },
    'CreatedReponse': {
        'id': {
            'attr': {}
        },
    },
    'DateRange': {
        'from': {
            'attr': {}
        },
        'to': {
            'attr': {}
        },
    },
    'ErrorReponse': {
        'code': {
            'attr': {}
        },
        'message': {
            'attr': {}
        },
    },
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */

export { APIS, CampaignAdminService, CampaignApplicationService, CategoriesAdminService, BASE_PATH, COLLECTION_FORMATS, Configuration, ApiModule, ModelConfig };
//# sourceMappingURL=nodi-crm-mobile-client.js.map
